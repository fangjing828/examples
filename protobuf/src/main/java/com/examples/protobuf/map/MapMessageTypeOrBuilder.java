// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

package com.examples.protobuf.map;

public interface MapMessageTypeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:ref.parse.MapMessageType)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>map&lt;bool, bool&gt; boolValue = 1;</code>
   */
  int getBoolValueCount();
  /**
   * <code>map&lt;bool, bool&gt; boolValue = 1;</code>
   */
  boolean containsBoolValue(
      boolean key);
  /**
   * Use {@link #getBoolValueMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.Boolean, java.lang.Boolean>
  getBoolValue();
  /**
   * <code>map&lt;bool, bool&gt; boolValue = 1;</code>
   */
  java.util.Map<java.lang.Boolean, java.lang.Boolean>
  getBoolValueMap();
  /**
   * <code>map&lt;bool, bool&gt; boolValue = 1;</code>
   */

  boolean getBoolValueOrDefault(
      boolean key,
      boolean defaultValue);
  /**
   * <code>map&lt;bool, bool&gt; boolValue = 1;</code>
   */

  boolean getBoolValueOrThrow(
      boolean key);

  /**
   * <code>map&lt;string, string&gt; stringValue = 2;</code>
   */
  int getStringValueCount();
  /**
   * <code>map&lt;string, string&gt; stringValue = 2;</code>
   */
  boolean containsStringValue(
      java.lang.String key);
  /**
   * Use {@link #getStringValueMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getStringValue();
  /**
   * <code>map&lt;string, string&gt; stringValue = 2;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getStringValueMap();
  /**
   * <code>map&lt;string, string&gt; stringValue = 2;</code>
   */

  java.lang.String getStringValueOrDefault(
      java.lang.String key,
      java.lang.String defaultValue);
  /**
   * <code>map&lt;string, string&gt; stringValue = 2;</code>
   */

  java.lang.String getStringValueOrThrow(
      java.lang.String key);

  /**
   * <code>map&lt;string, bytes&gt; bytesValue = 3;</code>
   */
  int getBytesValueCount();
  /**
   * <code>map&lt;string, bytes&gt; bytesValue = 3;</code>
   */
  boolean containsBytesValue(
      java.lang.String key);
  /**
   * Use {@link #getBytesValueMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.google.protobuf.ByteString>
  getBytesValue();
  /**
   * <code>map&lt;string, bytes&gt; bytesValue = 3;</code>
   */
  java.util.Map<java.lang.String, com.google.protobuf.ByteString>
  getBytesValueMap();
  /**
   * <code>map&lt;string, bytes&gt; bytesValue = 3;</code>
   */

  com.google.protobuf.ByteString getBytesValueOrDefault(
      java.lang.String key,
      com.google.protobuf.ByteString defaultValue);
  /**
   * <code>map&lt;string, bytes&gt; bytesValue = 3;</code>
   */

  com.google.protobuf.ByteString getBytesValueOrThrow(
      java.lang.String key);

  /**
   * <code>map&lt;int32, int32&gt; int32Value = 4;</code>
   */
  int getInt32ValueCount();
  /**
   * <code>map&lt;int32, int32&gt; int32Value = 4;</code>
   */
  boolean containsInt32Value(
      int key);
  /**
   * Use {@link #getInt32ValueMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.Integer, java.lang.Integer>
  getInt32Value();
  /**
   * <code>map&lt;int32, int32&gt; int32Value = 4;</code>
   */
  java.util.Map<java.lang.Integer, java.lang.Integer>
  getInt32ValueMap();
  /**
   * <code>map&lt;int32, int32&gt; int32Value = 4;</code>
   */

  int getInt32ValueOrDefault(
      int key,
      int defaultValue);
  /**
   * <code>map&lt;int32, int32&gt; int32Value = 4;</code>
   */

  int getInt32ValueOrThrow(
      int key);

  /**
   * <code>map&lt;fixed32, fixed32&gt; fixed32Value = 5;</code>
   */
  int getFixed32ValueCount();
  /**
   * <code>map&lt;fixed32, fixed32&gt; fixed32Value = 5;</code>
   */
  boolean containsFixed32Value(
      int key);
  /**
   * Use {@link #getFixed32ValueMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.Integer, java.lang.Integer>
  getFixed32Value();
  /**
   * <code>map&lt;fixed32, fixed32&gt; fixed32Value = 5;</code>
   */
  java.util.Map<java.lang.Integer, java.lang.Integer>
  getFixed32ValueMap();
  /**
   * <code>map&lt;fixed32, fixed32&gt; fixed32Value = 5;</code>
   */

  int getFixed32ValueOrDefault(
      int key,
      int defaultValue);
  /**
   * <code>map&lt;fixed32, fixed32&gt; fixed32Value = 5;</code>
   */

  int getFixed32ValueOrThrow(
      int key);

  /**
   * <code>map&lt;uint32, uint32&gt; uint32Value = 6;</code>
   */
  int getUint32ValueCount();
  /**
   * <code>map&lt;uint32, uint32&gt; uint32Value = 6;</code>
   */
  boolean containsUint32Value(
      int key);
  /**
   * Use {@link #getUint32ValueMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.Integer, java.lang.Integer>
  getUint32Value();
  /**
   * <code>map&lt;uint32, uint32&gt; uint32Value = 6;</code>
   */
  java.util.Map<java.lang.Integer, java.lang.Integer>
  getUint32ValueMap();
  /**
   * <code>map&lt;uint32, uint32&gt; uint32Value = 6;</code>
   */

  int getUint32ValueOrDefault(
      int key,
      int defaultValue);
  /**
   * <code>map&lt;uint32, uint32&gt; uint32Value = 6;</code>
   */

  int getUint32ValueOrThrow(
      int key);

  /**
   * <code>map&lt;int64, int64&gt; int64Value = 7;</code>
   */
  int getInt64ValueCount();
  /**
   * <code>map&lt;int64, int64&gt; int64Value = 7;</code>
   */
  boolean containsInt64Value(
      long key);
  /**
   * Use {@link #getInt64ValueMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.Long, java.lang.Long>
  getInt64Value();
  /**
   * <code>map&lt;int64, int64&gt; int64Value = 7;</code>
   */
  java.util.Map<java.lang.Long, java.lang.Long>
  getInt64ValueMap();
  /**
   * <code>map&lt;int64, int64&gt; int64Value = 7;</code>
   */

  long getInt64ValueOrDefault(
      long key,
      long defaultValue);
  /**
   * <code>map&lt;int64, int64&gt; int64Value = 7;</code>
   */

  long getInt64ValueOrThrow(
      long key);

  /**
   * <code>map&lt;fixed64, fixed64&gt; fixed64Value = 8;</code>
   */
  int getFixed64ValueCount();
  /**
   * <code>map&lt;fixed64, fixed64&gt; fixed64Value = 8;</code>
   */
  boolean containsFixed64Value(
      long key);
  /**
   * Use {@link #getFixed64ValueMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.Long, java.lang.Long>
  getFixed64Value();
  /**
   * <code>map&lt;fixed64, fixed64&gt; fixed64Value = 8;</code>
   */
  java.util.Map<java.lang.Long, java.lang.Long>
  getFixed64ValueMap();
  /**
   * <code>map&lt;fixed64, fixed64&gt; fixed64Value = 8;</code>
   */

  long getFixed64ValueOrDefault(
      long key,
      long defaultValue);
  /**
   * <code>map&lt;fixed64, fixed64&gt; fixed64Value = 8;</code>
   */

  long getFixed64ValueOrThrow(
      long key);

  /**
   * <code>map&lt;uint64, uint64&gt; uint64Value = 9;</code>
   */
  int getUint64ValueCount();
  /**
   * <code>map&lt;uint64, uint64&gt; uint64Value = 9;</code>
   */
  boolean containsUint64Value(
      long key);
  /**
   * Use {@link #getUint64ValueMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.Long, java.lang.Long>
  getUint64Value();
  /**
   * <code>map&lt;uint64, uint64&gt; uint64Value = 9;</code>
   */
  java.util.Map<java.lang.Long, java.lang.Long>
  getUint64ValueMap();
  /**
   * <code>map&lt;uint64, uint64&gt; uint64Value = 9;</code>
   */

  long getUint64ValueOrDefault(
      long key,
      long defaultValue);
  /**
   * <code>map&lt;uint64, uint64&gt; uint64Value = 9;</code>
   */

  long getUint64ValueOrThrow(
      long key);

  /**
   * <code>map&lt;string, float&gt; floatValue = 10;</code>
   */
  int getFloatValueCount();
  /**
   * <code>map&lt;string, float&gt; floatValue = 10;</code>
   */
  boolean containsFloatValue(
      java.lang.String key);
  /**
   * Use {@link #getFloatValueMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.Float>
  getFloatValue();
  /**
   * <code>map&lt;string, float&gt; floatValue = 10;</code>
   */
  java.util.Map<java.lang.String, java.lang.Float>
  getFloatValueMap();
  /**
   * <code>map&lt;string, float&gt; floatValue = 10;</code>
   */

  float getFloatValueOrDefault(
      java.lang.String key,
      float defaultValue);
  /**
   * <code>map&lt;string, float&gt; floatValue = 10;</code>
   */

  float getFloatValueOrThrow(
      java.lang.String key);

  /**
   * <code>map&lt;string, double&gt; doubleValue = 11;</code>
   */
  int getDoubleValueCount();
  /**
   * <code>map&lt;string, double&gt; doubleValue = 11;</code>
   */
  boolean containsDoubleValue(
      java.lang.String key);
  /**
   * Use {@link #getDoubleValueMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.Double>
  getDoubleValue();
  /**
   * <code>map&lt;string, double&gt; doubleValue = 11;</code>
   */
  java.util.Map<java.lang.String, java.lang.Double>
  getDoubleValueMap();
  /**
   * <code>map&lt;string, double&gt; doubleValue = 11;</code>
   */

  double getDoubleValueOrDefault(
      java.lang.String key,
      double defaultValue);
  /**
   * <code>map&lt;string, double&gt; doubleValue = 11;</code>
   */

  double getDoubleValueOrThrow(
      java.lang.String key);

  /**
   * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
   */
  int getEnumValueCount();
  /**
   * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
   */
  boolean containsEnumValue(
      java.lang.String key);
  /**
   * Use {@link #getEnumValueMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.examples.protobuf.map.EnumType>
  getEnumValue();
  /**
   * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
   */
  java.util.Map<java.lang.String, com.examples.protobuf.map.EnumType>
  getEnumValueMap();
  /**
   * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
   */
  com.examples.protobuf.map.EnumType getEnumValueOrDefault(
      java.lang.String key,
      com.examples.protobuf.map.EnumType defaultValue);
  /**
   * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
   */
  com.examples.protobuf.map.EnumType getEnumValueOrThrow(
      java.lang.String key);
  /**
   * Use {@link #getEnumValueValueMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.Integer>
  getEnumValueValue();
  /**
   * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
   */
  java.util.Map<java.lang.String, java.lang.Integer>
  getEnumValueValueMap();
  /**
   * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
   */

  int getEnumValueValueOrDefault(
      java.lang.String key,
      int defaultValue);
  /**
   * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
   */

  int getEnumValueValueOrThrow(
      java.lang.String key);

  /**
   * <code>map&lt;string, .ref.parse.ReferenceMessageType&gt; referenceValue = 13;</code>
   */
  int getReferenceValueCount();
  /**
   * <code>map&lt;string, .ref.parse.ReferenceMessageType&gt; referenceValue = 13;</code>
   */
  boolean containsReferenceValue(
      java.lang.String key);
  /**
   * Use {@link #getReferenceValueMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.examples.protobuf.map.ReferenceMessageType>
  getReferenceValue();
  /**
   * <code>map&lt;string, .ref.parse.ReferenceMessageType&gt; referenceValue = 13;</code>
   */
  java.util.Map<java.lang.String, com.examples.protobuf.map.ReferenceMessageType>
  getReferenceValueMap();
  /**
   * <code>map&lt;string, .ref.parse.ReferenceMessageType&gt; referenceValue = 13;</code>
   */

  com.examples.protobuf.map.ReferenceMessageType getReferenceValueOrDefault(
      java.lang.String key,
      com.examples.protobuf.map.ReferenceMessageType defaultValue);
  /**
   * <code>map&lt;string, .ref.parse.ReferenceMessageType&gt; referenceValue = 13;</code>
   */

  com.examples.protobuf.map.ReferenceMessageType getReferenceValueOrThrow(
      java.lang.String key);
}
