// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

package com.examples.protobuf.map;

/**
 * Protobuf type {@code ref.parse.ListMessageType}
 */
public final class ListMessageType extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:ref.parse.ListMessageType)
    ListMessageTypeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ListMessageType.newBuilder() to construct.
  private ListMessageType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ListMessageType() {
    boolValue_ = emptyBooleanList();
    stringValue_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    bytesValue_ = java.util.Collections.emptyList();
    int32Value_ = emptyIntList();
    fixed32Value_ = emptyIntList();
    uint32Value_ = emptyIntList();
    int64Value_ = emptyLongList();
    fixed64Value_ = emptyLongList();
    uint64Value_ = emptyLongList();
    floatValue_ = emptyFloatList();
    doubleValue_ = emptyDoubleList();
    enumValue_ = java.util.Collections.emptyList();
    referenceValue_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ListMessageType();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ListMessageType(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              boolValue_ = newBooleanList();
              mutable_bitField0_ |= 0x00000001;
            }
            boolValue_.addBoolean(input.readBool());
            break;
          }
          case 10: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
              boolValue_ = newBooleanList();
              mutable_bitField0_ |= 0x00000001;
            }
            while (input.getBytesUntilLimit() > 0) {
              boolValue_.addBoolean(input.readBool());
            }
            input.popLimit(limit);
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              stringValue_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000002;
            }
            stringValue_.add(s);
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              bytesValue_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
              mutable_bitField0_ |= 0x00000004;
            }
            bytesValue_.add(input.readBytes());
            break;
          }
          case 32: {
            if (!((mutable_bitField0_ & 0x00000008) != 0)) {
              int32Value_ = newIntList();
              mutable_bitField0_ |= 0x00000008;
            }
            int32Value_.addInt(input.readInt32());
            break;
          }
          case 34: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000008) != 0) && input.getBytesUntilLimit() > 0) {
              int32Value_ = newIntList();
              mutable_bitField0_ |= 0x00000008;
            }
            while (input.getBytesUntilLimit() > 0) {
              int32Value_.addInt(input.readInt32());
            }
            input.popLimit(limit);
            break;
          }
          case 45: {
            if (!((mutable_bitField0_ & 0x00000010) != 0)) {
              fixed32Value_ = newIntList();
              mutable_bitField0_ |= 0x00000010;
            }
            fixed32Value_.addInt(input.readFixed32());
            break;
          }
          case 42: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000010) != 0) && input.getBytesUntilLimit() > 0) {
              fixed32Value_ = newIntList();
              mutable_bitField0_ |= 0x00000010;
            }
            while (input.getBytesUntilLimit() > 0) {
              fixed32Value_.addInt(input.readFixed32());
            }
            input.popLimit(limit);
            break;
          }
          case 48: {
            if (!((mutable_bitField0_ & 0x00000020) != 0)) {
              uint32Value_ = newIntList();
              mutable_bitField0_ |= 0x00000020;
            }
            uint32Value_.addInt(input.readUInt32());
            break;
          }
          case 50: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000020) != 0) && input.getBytesUntilLimit() > 0) {
              uint32Value_ = newIntList();
              mutable_bitField0_ |= 0x00000020;
            }
            while (input.getBytesUntilLimit() > 0) {
              uint32Value_.addInt(input.readUInt32());
            }
            input.popLimit(limit);
            break;
          }
          case 56: {
            if (!((mutable_bitField0_ & 0x00000040) != 0)) {
              int64Value_ = newLongList();
              mutable_bitField0_ |= 0x00000040;
            }
            int64Value_.addLong(input.readInt64());
            break;
          }
          case 58: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000040) != 0) && input.getBytesUntilLimit() > 0) {
              int64Value_ = newLongList();
              mutable_bitField0_ |= 0x00000040;
            }
            while (input.getBytesUntilLimit() > 0) {
              int64Value_.addLong(input.readInt64());
            }
            input.popLimit(limit);
            break;
          }
          case 65: {
            if (!((mutable_bitField0_ & 0x00000080) != 0)) {
              fixed64Value_ = newLongList();
              mutable_bitField0_ |= 0x00000080;
            }
            fixed64Value_.addLong(input.readFixed64());
            break;
          }
          case 66: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000080) != 0) && input.getBytesUntilLimit() > 0) {
              fixed64Value_ = newLongList();
              mutable_bitField0_ |= 0x00000080;
            }
            while (input.getBytesUntilLimit() > 0) {
              fixed64Value_.addLong(input.readFixed64());
            }
            input.popLimit(limit);
            break;
          }
          case 72: {
            if (!((mutable_bitField0_ & 0x00000100) != 0)) {
              uint64Value_ = newLongList();
              mutable_bitField0_ |= 0x00000100;
            }
            uint64Value_.addLong(input.readUInt64());
            break;
          }
          case 74: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000100) != 0) && input.getBytesUntilLimit() > 0) {
              uint64Value_ = newLongList();
              mutable_bitField0_ |= 0x00000100;
            }
            while (input.getBytesUntilLimit() > 0) {
              uint64Value_.addLong(input.readUInt64());
            }
            input.popLimit(limit);
            break;
          }
          case 85: {
            if (!((mutable_bitField0_ & 0x00000200) != 0)) {
              floatValue_ = newFloatList();
              mutable_bitField0_ |= 0x00000200;
            }
            floatValue_.addFloat(input.readFloat());
            break;
          }
          case 82: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000200) != 0) && input.getBytesUntilLimit() > 0) {
              floatValue_ = newFloatList();
              mutable_bitField0_ |= 0x00000200;
            }
            while (input.getBytesUntilLimit() > 0) {
              floatValue_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 89: {
            if (!((mutable_bitField0_ & 0x00000400) != 0)) {
              doubleValue_ = newDoubleList();
              mutable_bitField0_ |= 0x00000400;
            }
            doubleValue_.addDouble(input.readDouble());
            break;
          }
          case 90: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000400) != 0) && input.getBytesUntilLimit() > 0) {
              doubleValue_ = newDoubleList();
              mutable_bitField0_ |= 0x00000400;
            }
            while (input.getBytesUntilLimit() > 0) {
              doubleValue_.addDouble(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 96: {
            int rawValue = input.readEnum();
            if (!((mutable_bitField0_ & 0x00000800) != 0)) {
              enumValue_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000800;
            }
            enumValue_.add(rawValue);
            break;
          }
          case 98: {
            int length = input.readRawVarint32();
            int oldLimit = input.pushLimit(length);
            while(input.getBytesUntilLimit() > 0) {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000800) != 0)) {
                enumValue_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              enumValue_.add(rawValue);
            }
            input.popLimit(oldLimit);
            break;
          }
          case 106: {
            if (!((mutable_bitField0_ & 0x00001000) != 0)) {
              referenceValue_ = new java.util.ArrayList<com.examples.protobuf.map.ReferenceMessageType>();
              mutable_bitField0_ |= 0x00001000;
            }
            referenceValue_.add(
                input.readMessage(com.examples.protobuf.map.ReferenceMessageType.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        boolValue_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        stringValue_ = stringValue_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        bytesValue_ = java.util.Collections.unmodifiableList(bytesValue_); // C
      }
      if (((mutable_bitField0_ & 0x00000008) != 0)) {
        int32Value_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000010) != 0)) {
        fixed32Value_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000020) != 0)) {
        uint32Value_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000040) != 0)) {
        int64Value_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000080) != 0)) {
        fixed64Value_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000100) != 0)) {
        uint64Value_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000200) != 0)) {
        floatValue_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000400) != 0)) {
        doubleValue_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000800) != 0)) {
        enumValue_ = java.util.Collections.unmodifiableList(enumValue_);
      }
      if (((mutable_bitField0_ & 0x00001000) != 0)) {
        referenceValue_ = java.util.Collections.unmodifiableList(referenceValue_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.examples.protobuf.map.Map.internal_static_ref_parse_ListMessageType_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.examples.protobuf.map.Map.internal_static_ref_parse_ListMessageType_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.examples.protobuf.map.ListMessageType.class, com.examples.protobuf.map.ListMessageType.Builder.class);
  }

  public static final int BOOLVALUE_FIELD_NUMBER = 1;
  private com.google.protobuf.Internal.BooleanList boolValue_;
  /**
   * <code>repeated bool boolValue = 1;</code>
   * @return A list containing the boolValue.
   */
  @java.lang.Override
  public java.util.List<java.lang.Boolean>
      getBoolValueList() {
    return boolValue_;
  }
  /**
   * <code>repeated bool boolValue = 1;</code>
   * @return The count of boolValue.
   */
  public int getBoolValueCount() {
    return boolValue_.size();
  }
  /**
   * <code>repeated bool boolValue = 1;</code>
   * @param index The index of the element to return.
   * @return The boolValue at the given index.
   */
  public boolean getBoolValue(int index) {
    return boolValue_.getBoolean(index);
  }
  private int boolValueMemoizedSerializedSize = -1;

  public static final int STRINGVALUE_FIELD_NUMBER = 2;
  private com.google.protobuf.LazyStringList stringValue_;
  /**
   * <code>repeated string stringValue = 2;</code>
   * @return A list containing the stringValue.
   */
  public com.google.protobuf.ProtocolStringList
      getStringValueList() {
    return stringValue_;
  }
  /**
   * <code>repeated string stringValue = 2;</code>
   * @return The count of stringValue.
   */
  public int getStringValueCount() {
    return stringValue_.size();
  }
  /**
   * <code>repeated string stringValue = 2;</code>
   * @param index The index of the element to return.
   * @return The stringValue at the given index.
   */
  public java.lang.String getStringValue(int index) {
    return stringValue_.get(index);
  }
  /**
   * <code>repeated string stringValue = 2;</code>
   * @param index The index of the value to return.
   * @return The bytes of the stringValue at the given index.
   */
  public com.google.protobuf.ByteString
      getStringValueBytes(int index) {
    return stringValue_.getByteString(index);
  }

  public static final int BYTESVALUE_FIELD_NUMBER = 3;
  private java.util.List<com.google.protobuf.ByteString> bytesValue_;
  /**
   * <code>repeated bytes bytesValue = 3;</code>
   * @return A list containing the bytesValue.
   */
  @java.lang.Override
  public java.util.List<com.google.protobuf.ByteString>
      getBytesValueList() {
    return bytesValue_;
  }
  /**
   * <code>repeated bytes bytesValue = 3;</code>
   * @return The count of bytesValue.
   */
  public int getBytesValueCount() {
    return bytesValue_.size();
  }
  /**
   * <code>repeated bytes bytesValue = 3;</code>
   * @param index The index of the element to return.
   * @return The bytesValue at the given index.
   */
  public com.google.protobuf.ByteString getBytesValue(int index) {
    return bytesValue_.get(index);
  }

  public static final int INT32VALUE_FIELD_NUMBER = 4;
  private com.google.protobuf.Internal.IntList int32Value_;
  /**
   * <code>repeated int32 int32Value = 4;</code>
   * @return A list containing the int32Value.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getInt32ValueList() {
    return int32Value_;
  }
  /**
   * <code>repeated int32 int32Value = 4;</code>
   * @return The count of int32Value.
   */
  public int getInt32ValueCount() {
    return int32Value_.size();
  }
  /**
   * <code>repeated int32 int32Value = 4;</code>
   * @param index The index of the element to return.
   * @return The int32Value at the given index.
   */
  public int getInt32Value(int index) {
    return int32Value_.getInt(index);
  }
  private int int32ValueMemoizedSerializedSize = -1;

  public static final int FIXED32VALUE_FIELD_NUMBER = 5;
  private com.google.protobuf.Internal.IntList fixed32Value_;
  /**
   * <code>repeated fixed32 fixed32Value = 5;</code>
   * @return A list containing the fixed32Value.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getFixed32ValueList() {
    return fixed32Value_;
  }
  /**
   * <code>repeated fixed32 fixed32Value = 5;</code>
   * @return The count of fixed32Value.
   */
  public int getFixed32ValueCount() {
    return fixed32Value_.size();
  }
  /**
   * <code>repeated fixed32 fixed32Value = 5;</code>
   * @param index The index of the element to return.
   * @return The fixed32Value at the given index.
   */
  public int getFixed32Value(int index) {
    return fixed32Value_.getInt(index);
  }
  private int fixed32ValueMemoizedSerializedSize = -1;

  public static final int UINT32VALUE_FIELD_NUMBER = 6;
  private com.google.protobuf.Internal.IntList uint32Value_;
  /**
   * <code>repeated uint32 uint32Value = 6;</code>
   * @return A list containing the uint32Value.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getUint32ValueList() {
    return uint32Value_;
  }
  /**
   * <code>repeated uint32 uint32Value = 6;</code>
   * @return The count of uint32Value.
   */
  public int getUint32ValueCount() {
    return uint32Value_.size();
  }
  /**
   * <code>repeated uint32 uint32Value = 6;</code>
   * @param index The index of the element to return.
   * @return The uint32Value at the given index.
   */
  public int getUint32Value(int index) {
    return uint32Value_.getInt(index);
  }
  private int uint32ValueMemoizedSerializedSize = -1;

  public static final int INT64VALUE_FIELD_NUMBER = 7;
  private com.google.protobuf.Internal.LongList int64Value_;
  /**
   * <code>repeated int64 int64Value = 7;</code>
   * @return A list containing the int64Value.
   */
  @java.lang.Override
  public java.util.List<java.lang.Long>
      getInt64ValueList() {
    return int64Value_;
  }
  /**
   * <code>repeated int64 int64Value = 7;</code>
   * @return The count of int64Value.
   */
  public int getInt64ValueCount() {
    return int64Value_.size();
  }
  /**
   * <code>repeated int64 int64Value = 7;</code>
   * @param index The index of the element to return.
   * @return The int64Value at the given index.
   */
  public long getInt64Value(int index) {
    return int64Value_.getLong(index);
  }
  private int int64ValueMemoizedSerializedSize = -1;

  public static final int FIXED64VALUE_FIELD_NUMBER = 8;
  private com.google.protobuf.Internal.LongList fixed64Value_;
  /**
   * <code>repeated fixed64 fixed64Value = 8;</code>
   * @return A list containing the fixed64Value.
   */
  @java.lang.Override
  public java.util.List<java.lang.Long>
      getFixed64ValueList() {
    return fixed64Value_;
  }
  /**
   * <code>repeated fixed64 fixed64Value = 8;</code>
   * @return The count of fixed64Value.
   */
  public int getFixed64ValueCount() {
    return fixed64Value_.size();
  }
  /**
   * <code>repeated fixed64 fixed64Value = 8;</code>
   * @param index The index of the element to return.
   * @return The fixed64Value at the given index.
   */
  public long getFixed64Value(int index) {
    return fixed64Value_.getLong(index);
  }
  private int fixed64ValueMemoizedSerializedSize = -1;

  public static final int UINT64VALUE_FIELD_NUMBER = 9;
  private com.google.protobuf.Internal.LongList uint64Value_;
  /**
   * <code>repeated uint64 uint64Value = 9;</code>
   * @return A list containing the uint64Value.
   */
  @java.lang.Override
  public java.util.List<java.lang.Long>
      getUint64ValueList() {
    return uint64Value_;
  }
  /**
   * <code>repeated uint64 uint64Value = 9;</code>
   * @return The count of uint64Value.
   */
  public int getUint64ValueCount() {
    return uint64Value_.size();
  }
  /**
   * <code>repeated uint64 uint64Value = 9;</code>
   * @param index The index of the element to return.
   * @return The uint64Value at the given index.
   */
  public long getUint64Value(int index) {
    return uint64Value_.getLong(index);
  }
  private int uint64ValueMemoizedSerializedSize = -1;

  public static final int FLOATVALUE_FIELD_NUMBER = 10;
  private com.google.protobuf.Internal.FloatList floatValue_;
  /**
   * <code>repeated float floatValue = 10;</code>
   * @return A list containing the floatValue.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getFloatValueList() {
    return floatValue_;
  }
  /**
   * <code>repeated float floatValue = 10;</code>
   * @return The count of floatValue.
   */
  public int getFloatValueCount() {
    return floatValue_.size();
  }
  /**
   * <code>repeated float floatValue = 10;</code>
   * @param index The index of the element to return.
   * @return The floatValue at the given index.
   */
  public float getFloatValue(int index) {
    return floatValue_.getFloat(index);
  }
  private int floatValueMemoizedSerializedSize = -1;

  public static final int DOUBLEVALUE_FIELD_NUMBER = 11;
  private com.google.protobuf.Internal.DoubleList doubleValue_;
  /**
   * <code>repeated double doubleValue = 11;</code>
   * @return A list containing the doubleValue.
   */
  @java.lang.Override
  public java.util.List<java.lang.Double>
      getDoubleValueList() {
    return doubleValue_;
  }
  /**
   * <code>repeated double doubleValue = 11;</code>
   * @return The count of doubleValue.
   */
  public int getDoubleValueCount() {
    return doubleValue_.size();
  }
  /**
   * <code>repeated double doubleValue = 11;</code>
   * @param index The index of the element to return.
   * @return The doubleValue at the given index.
   */
  public double getDoubleValue(int index) {
    return doubleValue_.getDouble(index);
  }
  private int doubleValueMemoizedSerializedSize = -1;

  public static final int ENUMVALUE_FIELD_NUMBER = 12;
  private java.util.List<java.lang.Integer> enumValue_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, com.examples.protobuf.map.EnumType> enumValue_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, com.examples.protobuf.map.EnumType>() {
            public com.examples.protobuf.map.EnumType convert(java.lang.Integer from) {
              @SuppressWarnings("deprecation")
              com.examples.protobuf.map.EnumType result = com.examples.protobuf.map.EnumType.valueOf(from);
              return result == null ? com.examples.protobuf.map.EnumType.UNRECOGNIZED : result;
            }
          };
  /**
   * <code>repeated .ref.parse.EnumType enumValue = 12;</code>
   * @return A list containing the enumValue.
   */
  @java.lang.Override
  public java.util.List<com.examples.protobuf.map.EnumType> getEnumValueList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, com.examples.protobuf.map.EnumType>(enumValue_, enumValue_converter_);
  }
  /**
   * <code>repeated .ref.parse.EnumType enumValue = 12;</code>
   * @return The count of enumValue.
   */
  @java.lang.Override
  public int getEnumValueCount() {
    return enumValue_.size();
  }
  /**
   * <code>repeated .ref.parse.EnumType enumValue = 12;</code>
   * @param index The index of the element to return.
   * @return The enumValue at the given index.
   */
  @java.lang.Override
  public com.examples.protobuf.map.EnumType getEnumValue(int index) {
    return enumValue_converter_.convert(enumValue_.get(index));
  }
  /**
   * <code>repeated .ref.parse.EnumType enumValue = 12;</code>
   * @return A list containing the enum numeric values on the wire for enumValue.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
  getEnumValueValueList() {
    return enumValue_;
  }
  /**
   * <code>repeated .ref.parse.EnumType enumValue = 12;</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of enumValue at the given index.
   */
  @java.lang.Override
  public int getEnumValueValue(int index) {
    return enumValue_.get(index);
  }
  private int enumValueMemoizedSerializedSize;

  public static final int REFERENCEVALUE_FIELD_NUMBER = 13;
  private java.util.List<com.examples.protobuf.map.ReferenceMessageType> referenceValue_;
  /**
   * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
   */
  @java.lang.Override
  public java.util.List<com.examples.protobuf.map.ReferenceMessageType> getReferenceValueList() {
    return referenceValue_;
  }
  /**
   * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.examples.protobuf.map.ReferenceMessageTypeOrBuilder> 
      getReferenceValueOrBuilderList() {
    return referenceValue_;
  }
  /**
   * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
   */
  @java.lang.Override
  public int getReferenceValueCount() {
    return referenceValue_.size();
  }
  /**
   * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
   */
  @java.lang.Override
  public com.examples.protobuf.map.ReferenceMessageType getReferenceValue(int index) {
    return referenceValue_.get(index);
  }
  /**
   * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
   */
  @java.lang.Override
  public com.examples.protobuf.map.ReferenceMessageTypeOrBuilder getReferenceValueOrBuilder(
      int index) {
    return referenceValue_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (getBoolValueList().size() > 0) {
      output.writeUInt32NoTag(10);
      output.writeUInt32NoTag(boolValueMemoizedSerializedSize);
    }
    for (int i = 0; i < boolValue_.size(); i++) {
      output.writeBoolNoTag(boolValue_.getBoolean(i));
    }
    for (int i = 0; i < stringValue_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, stringValue_.getRaw(i));
    }
    for (int i = 0; i < bytesValue_.size(); i++) {
      output.writeBytes(3, bytesValue_.get(i));
    }
    if (getInt32ValueList().size() > 0) {
      output.writeUInt32NoTag(34);
      output.writeUInt32NoTag(int32ValueMemoizedSerializedSize);
    }
    for (int i = 0; i < int32Value_.size(); i++) {
      output.writeInt32NoTag(int32Value_.getInt(i));
    }
    if (getFixed32ValueList().size() > 0) {
      output.writeUInt32NoTag(42);
      output.writeUInt32NoTag(fixed32ValueMemoizedSerializedSize);
    }
    for (int i = 0; i < fixed32Value_.size(); i++) {
      output.writeFixed32NoTag(fixed32Value_.getInt(i));
    }
    if (getUint32ValueList().size() > 0) {
      output.writeUInt32NoTag(50);
      output.writeUInt32NoTag(uint32ValueMemoizedSerializedSize);
    }
    for (int i = 0; i < uint32Value_.size(); i++) {
      output.writeUInt32NoTag(uint32Value_.getInt(i));
    }
    if (getInt64ValueList().size() > 0) {
      output.writeUInt32NoTag(58);
      output.writeUInt32NoTag(int64ValueMemoizedSerializedSize);
    }
    for (int i = 0; i < int64Value_.size(); i++) {
      output.writeInt64NoTag(int64Value_.getLong(i));
    }
    if (getFixed64ValueList().size() > 0) {
      output.writeUInt32NoTag(66);
      output.writeUInt32NoTag(fixed64ValueMemoizedSerializedSize);
    }
    for (int i = 0; i < fixed64Value_.size(); i++) {
      output.writeFixed64NoTag(fixed64Value_.getLong(i));
    }
    if (getUint64ValueList().size() > 0) {
      output.writeUInt32NoTag(74);
      output.writeUInt32NoTag(uint64ValueMemoizedSerializedSize);
    }
    for (int i = 0; i < uint64Value_.size(); i++) {
      output.writeUInt64NoTag(uint64Value_.getLong(i));
    }
    if (getFloatValueList().size() > 0) {
      output.writeUInt32NoTag(82);
      output.writeUInt32NoTag(floatValueMemoizedSerializedSize);
    }
    for (int i = 0; i < floatValue_.size(); i++) {
      output.writeFloatNoTag(floatValue_.getFloat(i));
    }
    if (getDoubleValueList().size() > 0) {
      output.writeUInt32NoTag(90);
      output.writeUInt32NoTag(doubleValueMemoizedSerializedSize);
    }
    for (int i = 0; i < doubleValue_.size(); i++) {
      output.writeDoubleNoTag(doubleValue_.getDouble(i));
    }
    if (getEnumValueList().size() > 0) {
      output.writeUInt32NoTag(98);
      output.writeUInt32NoTag(enumValueMemoizedSerializedSize);
    }
    for (int i = 0; i < enumValue_.size(); i++) {
      output.writeEnumNoTag(enumValue_.get(i));
    }
    for (int i = 0; i < referenceValue_.size(); i++) {
      output.writeMessage(13, referenceValue_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      dataSize = 1 * getBoolValueList().size();
      size += dataSize;
      if (!getBoolValueList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      boolValueMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < stringValue_.size(); i++) {
        dataSize += computeStringSizeNoTag(stringValue_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getStringValueList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < bytesValue_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeBytesSizeNoTag(bytesValue_.get(i));
      }
      size += dataSize;
      size += 1 * getBytesValueList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < int32Value_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(int32Value_.getInt(i));
      }
      size += dataSize;
      if (!getInt32ValueList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      int32ValueMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getFixed32ValueList().size();
      size += dataSize;
      if (!getFixed32ValueList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      fixed32ValueMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < uint32Value_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(uint32Value_.getInt(i));
      }
      size += dataSize;
      if (!getUint32ValueList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      uint32ValueMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < int64Value_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt64SizeNoTag(int64Value_.getLong(i));
      }
      size += dataSize;
      if (!getInt64ValueList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      int64ValueMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getFixed64ValueList().size();
      size += dataSize;
      if (!getFixed64ValueList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      fixed64ValueMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < uint64Value_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeUInt64SizeNoTag(uint64Value_.getLong(i));
      }
      size += dataSize;
      if (!getUint64ValueList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      uint64ValueMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getFloatValueList().size();
      size += dataSize;
      if (!getFloatValueList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      floatValueMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getDoubleValueList().size();
      size += dataSize;
      if (!getDoubleValueList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      doubleValueMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < enumValue_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(enumValue_.get(i));
      }
      size += dataSize;
      if (!getEnumValueList().isEmpty()) {  size += 1;
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(dataSize);
      }enumValueMemoizedSerializedSize = dataSize;
    }
    for (int i = 0; i < referenceValue_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, referenceValue_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.examples.protobuf.map.ListMessageType)) {
      return super.equals(obj);
    }
    com.examples.protobuf.map.ListMessageType other = (com.examples.protobuf.map.ListMessageType) obj;

    if (!getBoolValueList()
        .equals(other.getBoolValueList())) return false;
    if (!getStringValueList()
        .equals(other.getStringValueList())) return false;
    if (!getBytesValueList()
        .equals(other.getBytesValueList())) return false;
    if (!getInt32ValueList()
        .equals(other.getInt32ValueList())) return false;
    if (!getFixed32ValueList()
        .equals(other.getFixed32ValueList())) return false;
    if (!getUint32ValueList()
        .equals(other.getUint32ValueList())) return false;
    if (!getInt64ValueList()
        .equals(other.getInt64ValueList())) return false;
    if (!getFixed64ValueList()
        .equals(other.getFixed64ValueList())) return false;
    if (!getUint64ValueList()
        .equals(other.getUint64ValueList())) return false;
    if (!getFloatValueList()
        .equals(other.getFloatValueList())) return false;
    if (!getDoubleValueList()
        .equals(other.getDoubleValueList())) return false;
    if (!enumValue_.equals(other.enumValue_)) return false;
    if (!getReferenceValueList()
        .equals(other.getReferenceValueList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getBoolValueCount() > 0) {
      hash = (37 * hash) + BOOLVALUE_FIELD_NUMBER;
      hash = (53 * hash) + getBoolValueList().hashCode();
    }
    if (getStringValueCount() > 0) {
      hash = (37 * hash) + STRINGVALUE_FIELD_NUMBER;
      hash = (53 * hash) + getStringValueList().hashCode();
    }
    if (getBytesValueCount() > 0) {
      hash = (37 * hash) + BYTESVALUE_FIELD_NUMBER;
      hash = (53 * hash) + getBytesValueList().hashCode();
    }
    if (getInt32ValueCount() > 0) {
      hash = (37 * hash) + INT32VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getInt32ValueList().hashCode();
    }
    if (getFixed32ValueCount() > 0) {
      hash = (37 * hash) + FIXED32VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getFixed32ValueList().hashCode();
    }
    if (getUint32ValueCount() > 0) {
      hash = (37 * hash) + UINT32VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getUint32ValueList().hashCode();
    }
    if (getInt64ValueCount() > 0) {
      hash = (37 * hash) + INT64VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getInt64ValueList().hashCode();
    }
    if (getFixed64ValueCount() > 0) {
      hash = (37 * hash) + FIXED64VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getFixed64ValueList().hashCode();
    }
    if (getUint64ValueCount() > 0) {
      hash = (37 * hash) + UINT64VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getUint64ValueList().hashCode();
    }
    if (getFloatValueCount() > 0) {
      hash = (37 * hash) + FLOATVALUE_FIELD_NUMBER;
      hash = (53 * hash) + getFloatValueList().hashCode();
    }
    if (getDoubleValueCount() > 0) {
      hash = (37 * hash) + DOUBLEVALUE_FIELD_NUMBER;
      hash = (53 * hash) + getDoubleValueList().hashCode();
    }
    if (getEnumValueCount() > 0) {
      hash = (37 * hash) + ENUMVALUE_FIELD_NUMBER;
      hash = (53 * hash) + enumValue_.hashCode();
    }
    if (getReferenceValueCount() > 0) {
      hash = (37 * hash) + REFERENCEVALUE_FIELD_NUMBER;
      hash = (53 * hash) + getReferenceValueList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.examples.protobuf.map.ListMessageType parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.examples.protobuf.map.ListMessageType parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.examples.protobuf.map.ListMessageType parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.examples.protobuf.map.ListMessageType parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.examples.protobuf.map.ListMessageType parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.examples.protobuf.map.ListMessageType parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.examples.protobuf.map.ListMessageType parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.examples.protobuf.map.ListMessageType parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.examples.protobuf.map.ListMessageType parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.examples.protobuf.map.ListMessageType parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.examples.protobuf.map.ListMessageType parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.examples.protobuf.map.ListMessageType parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.examples.protobuf.map.ListMessageType prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code ref.parse.ListMessageType}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:ref.parse.ListMessageType)
      com.examples.protobuf.map.ListMessageTypeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.examples.protobuf.map.Map.internal_static_ref_parse_ListMessageType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.examples.protobuf.map.Map.internal_static_ref_parse_ListMessageType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.examples.protobuf.map.ListMessageType.class, com.examples.protobuf.map.ListMessageType.Builder.class);
    }

    // Construct using com.examples.protobuf.map.ListMessageType.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getReferenceValueFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      boolValue_ = emptyBooleanList();
      bitField0_ = (bitField0_ & ~0x00000001);
      stringValue_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      bytesValue_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      int32Value_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000008);
      fixed32Value_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000010);
      uint32Value_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000020);
      int64Value_ = emptyLongList();
      bitField0_ = (bitField0_ & ~0x00000040);
      fixed64Value_ = emptyLongList();
      bitField0_ = (bitField0_ & ~0x00000080);
      uint64Value_ = emptyLongList();
      bitField0_ = (bitField0_ & ~0x00000100);
      floatValue_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000200);
      doubleValue_ = emptyDoubleList();
      bitField0_ = (bitField0_ & ~0x00000400);
      enumValue_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000800);
      if (referenceValueBuilder_ == null) {
        referenceValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
      } else {
        referenceValueBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.examples.protobuf.map.Map.internal_static_ref_parse_ListMessageType_descriptor;
    }

    @java.lang.Override
    public com.examples.protobuf.map.ListMessageType getDefaultInstanceForType() {
      return com.examples.protobuf.map.ListMessageType.getDefaultInstance();
    }

    @java.lang.Override
    public com.examples.protobuf.map.ListMessageType build() {
      com.examples.protobuf.map.ListMessageType result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.examples.protobuf.map.ListMessageType buildPartial() {
      com.examples.protobuf.map.ListMessageType result = new com.examples.protobuf.map.ListMessageType(this);
      int from_bitField0_ = bitField0_;
      if (((bitField0_ & 0x00000001) != 0)) {
        boolValue_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.boolValue_ = boolValue_;
      if (((bitField0_ & 0x00000002) != 0)) {
        stringValue_ = stringValue_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.stringValue_ = stringValue_;
      if (((bitField0_ & 0x00000004) != 0)) {
        bytesValue_ = java.util.Collections.unmodifiableList(bytesValue_);
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.bytesValue_ = bytesValue_;
      if (((bitField0_ & 0x00000008) != 0)) {
        int32Value_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000008);
      }
      result.int32Value_ = int32Value_;
      if (((bitField0_ & 0x00000010) != 0)) {
        fixed32Value_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000010);
      }
      result.fixed32Value_ = fixed32Value_;
      if (((bitField0_ & 0x00000020) != 0)) {
        uint32Value_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000020);
      }
      result.uint32Value_ = uint32Value_;
      if (((bitField0_ & 0x00000040) != 0)) {
        int64Value_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000040);
      }
      result.int64Value_ = int64Value_;
      if (((bitField0_ & 0x00000080) != 0)) {
        fixed64Value_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000080);
      }
      result.fixed64Value_ = fixed64Value_;
      if (((bitField0_ & 0x00000100) != 0)) {
        uint64Value_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000100);
      }
      result.uint64Value_ = uint64Value_;
      if (((bitField0_ & 0x00000200) != 0)) {
        floatValue_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000200);
      }
      result.floatValue_ = floatValue_;
      if (((bitField0_ & 0x00000400) != 0)) {
        doubleValue_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000400);
      }
      result.doubleValue_ = doubleValue_;
      if (((bitField0_ & 0x00000800) != 0)) {
        enumValue_ = java.util.Collections.unmodifiableList(enumValue_);
        bitField0_ = (bitField0_ & ~0x00000800);
      }
      result.enumValue_ = enumValue_;
      if (referenceValueBuilder_ == null) {
        if (((bitField0_ & 0x00001000) != 0)) {
          referenceValue_ = java.util.Collections.unmodifiableList(referenceValue_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.referenceValue_ = referenceValue_;
      } else {
        result.referenceValue_ = referenceValueBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.examples.protobuf.map.ListMessageType) {
        return mergeFrom((com.examples.protobuf.map.ListMessageType)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.examples.protobuf.map.ListMessageType other) {
      if (other == com.examples.protobuf.map.ListMessageType.getDefaultInstance()) return this;
      if (!other.boolValue_.isEmpty()) {
        if (boolValue_.isEmpty()) {
          boolValue_ = other.boolValue_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureBoolValueIsMutable();
          boolValue_.addAll(other.boolValue_);
        }
        onChanged();
      }
      if (!other.stringValue_.isEmpty()) {
        if (stringValue_.isEmpty()) {
          stringValue_ = other.stringValue_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureStringValueIsMutable();
          stringValue_.addAll(other.stringValue_);
        }
        onChanged();
      }
      if (!other.bytesValue_.isEmpty()) {
        if (bytesValue_.isEmpty()) {
          bytesValue_ = other.bytesValue_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureBytesValueIsMutable();
          bytesValue_.addAll(other.bytesValue_);
        }
        onChanged();
      }
      if (!other.int32Value_.isEmpty()) {
        if (int32Value_.isEmpty()) {
          int32Value_ = other.int32Value_;
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          ensureInt32ValueIsMutable();
          int32Value_.addAll(other.int32Value_);
        }
        onChanged();
      }
      if (!other.fixed32Value_.isEmpty()) {
        if (fixed32Value_.isEmpty()) {
          fixed32Value_ = other.fixed32Value_;
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          ensureFixed32ValueIsMutable();
          fixed32Value_.addAll(other.fixed32Value_);
        }
        onChanged();
      }
      if (!other.uint32Value_.isEmpty()) {
        if (uint32Value_.isEmpty()) {
          uint32Value_ = other.uint32Value_;
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          ensureUint32ValueIsMutable();
          uint32Value_.addAll(other.uint32Value_);
        }
        onChanged();
      }
      if (!other.int64Value_.isEmpty()) {
        if (int64Value_.isEmpty()) {
          int64Value_ = other.int64Value_;
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          ensureInt64ValueIsMutable();
          int64Value_.addAll(other.int64Value_);
        }
        onChanged();
      }
      if (!other.fixed64Value_.isEmpty()) {
        if (fixed64Value_.isEmpty()) {
          fixed64Value_ = other.fixed64Value_;
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          ensureFixed64ValueIsMutable();
          fixed64Value_.addAll(other.fixed64Value_);
        }
        onChanged();
      }
      if (!other.uint64Value_.isEmpty()) {
        if (uint64Value_.isEmpty()) {
          uint64Value_ = other.uint64Value_;
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          ensureUint64ValueIsMutable();
          uint64Value_.addAll(other.uint64Value_);
        }
        onChanged();
      }
      if (!other.floatValue_.isEmpty()) {
        if (floatValue_.isEmpty()) {
          floatValue_ = other.floatValue_;
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          ensureFloatValueIsMutable();
          floatValue_.addAll(other.floatValue_);
        }
        onChanged();
      }
      if (!other.doubleValue_.isEmpty()) {
        if (doubleValue_.isEmpty()) {
          doubleValue_ = other.doubleValue_;
          bitField0_ = (bitField0_ & ~0x00000400);
        } else {
          ensureDoubleValueIsMutable();
          doubleValue_.addAll(other.doubleValue_);
        }
        onChanged();
      }
      if (!other.enumValue_.isEmpty()) {
        if (enumValue_.isEmpty()) {
          enumValue_ = other.enumValue_;
          bitField0_ = (bitField0_ & ~0x00000800);
        } else {
          ensureEnumValueIsMutable();
          enumValue_.addAll(other.enumValue_);
        }
        onChanged();
      }
      if (referenceValueBuilder_ == null) {
        if (!other.referenceValue_.isEmpty()) {
          if (referenceValue_.isEmpty()) {
            referenceValue_ = other.referenceValue_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureReferenceValueIsMutable();
            referenceValue_.addAll(other.referenceValue_);
          }
          onChanged();
        }
      } else {
        if (!other.referenceValue_.isEmpty()) {
          if (referenceValueBuilder_.isEmpty()) {
            referenceValueBuilder_.dispose();
            referenceValueBuilder_ = null;
            referenceValue_ = other.referenceValue_;
            bitField0_ = (bitField0_ & ~0x00001000);
            referenceValueBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getReferenceValueFieldBuilder() : null;
          } else {
            referenceValueBuilder_.addAllMessages(other.referenceValue_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.examples.protobuf.map.ListMessageType parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.examples.protobuf.map.ListMessageType) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.Internal.BooleanList boolValue_ = emptyBooleanList();
    private void ensureBoolValueIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        boolValue_ = mutableCopy(boolValue_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <code>repeated bool boolValue = 1;</code>
     * @return A list containing the boolValue.
     */
    public java.util.List<java.lang.Boolean>
        getBoolValueList() {
      return ((bitField0_ & 0x00000001) != 0) ?
               java.util.Collections.unmodifiableList(boolValue_) : boolValue_;
    }
    /**
     * <code>repeated bool boolValue = 1;</code>
     * @return The count of boolValue.
     */
    public int getBoolValueCount() {
      return boolValue_.size();
    }
    /**
     * <code>repeated bool boolValue = 1;</code>
     * @param index The index of the element to return.
     * @return The boolValue at the given index.
     */
    public boolean getBoolValue(int index) {
      return boolValue_.getBoolean(index);
    }
    /**
     * <code>repeated bool boolValue = 1;</code>
     * @param index The index to set the value at.
     * @param value The boolValue to set.
     * @return This builder for chaining.
     */
    public Builder setBoolValue(
        int index, boolean value) {
      ensureBoolValueIsMutable();
      boolValue_.setBoolean(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated bool boolValue = 1;</code>
     * @param value The boolValue to add.
     * @return This builder for chaining.
     */
    public Builder addBoolValue(boolean value) {
      ensureBoolValueIsMutable();
      boolValue_.addBoolean(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated bool boolValue = 1;</code>
     * @param values The boolValue to add.
     * @return This builder for chaining.
     */
    public Builder addAllBoolValue(
        java.lang.Iterable<? extends java.lang.Boolean> values) {
      ensureBoolValueIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, boolValue_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated bool boolValue = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearBoolValue() {
      boolValue_ = emptyBooleanList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList stringValue_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureStringValueIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        stringValue_ = new com.google.protobuf.LazyStringArrayList(stringValue_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <code>repeated string stringValue = 2;</code>
     * @return A list containing the stringValue.
     */
    public com.google.protobuf.ProtocolStringList
        getStringValueList() {
      return stringValue_.getUnmodifiableView();
    }
    /**
     * <code>repeated string stringValue = 2;</code>
     * @return The count of stringValue.
     */
    public int getStringValueCount() {
      return stringValue_.size();
    }
    /**
     * <code>repeated string stringValue = 2;</code>
     * @param index The index of the element to return.
     * @return The stringValue at the given index.
     */
    public java.lang.String getStringValue(int index) {
      return stringValue_.get(index);
    }
    /**
     * <code>repeated string stringValue = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the stringValue at the given index.
     */
    public com.google.protobuf.ByteString
        getStringValueBytes(int index) {
      return stringValue_.getByteString(index);
    }
    /**
     * <code>repeated string stringValue = 2;</code>
     * @param index The index to set the value at.
     * @param value The stringValue to set.
     * @return This builder for chaining.
     */
    public Builder setStringValue(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureStringValueIsMutable();
      stringValue_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string stringValue = 2;</code>
     * @param value The stringValue to add.
     * @return This builder for chaining.
     */
    public Builder addStringValue(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureStringValueIsMutable();
      stringValue_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string stringValue = 2;</code>
     * @param values The stringValue to add.
     * @return This builder for chaining.
     */
    public Builder addAllStringValue(
        java.lang.Iterable<java.lang.String> values) {
      ensureStringValueIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, stringValue_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string stringValue = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearStringValue() {
      stringValue_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string stringValue = 2;</code>
     * @param value The bytes of the stringValue to add.
     * @return This builder for chaining.
     */
    public Builder addStringValueBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureStringValueIsMutable();
      stringValue_.add(value);
      onChanged();
      return this;
    }

    private java.util.List<com.google.protobuf.ByteString> bytesValue_ = java.util.Collections.emptyList();
    private void ensureBytesValueIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        bytesValue_ = new java.util.ArrayList<com.google.protobuf.ByteString>(bytesValue_);
        bitField0_ |= 0x00000004;
       }
    }
    /**
     * <code>repeated bytes bytesValue = 3;</code>
     * @return A list containing the bytesValue.
     */
    public java.util.List<com.google.protobuf.ByteString>
        getBytesValueList() {
      return ((bitField0_ & 0x00000004) != 0) ?
               java.util.Collections.unmodifiableList(bytesValue_) : bytesValue_;
    }
    /**
     * <code>repeated bytes bytesValue = 3;</code>
     * @return The count of bytesValue.
     */
    public int getBytesValueCount() {
      return bytesValue_.size();
    }
    /**
     * <code>repeated bytes bytesValue = 3;</code>
     * @param index The index of the element to return.
     * @return The bytesValue at the given index.
     */
    public com.google.protobuf.ByteString getBytesValue(int index) {
      return bytesValue_.get(index);
    }
    /**
     * <code>repeated bytes bytesValue = 3;</code>
     * @param index The index to set the value at.
     * @param value The bytesValue to set.
     * @return This builder for chaining.
     */
    public Builder setBytesValue(
        int index, com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureBytesValueIsMutable();
      bytesValue_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated bytes bytesValue = 3;</code>
     * @param value The bytesValue to add.
     * @return This builder for chaining.
     */
    public Builder addBytesValue(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureBytesValueIsMutable();
      bytesValue_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated bytes bytesValue = 3;</code>
     * @param values The bytesValue to add.
     * @return This builder for chaining.
     */
    public Builder addAllBytesValue(
        java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
      ensureBytesValueIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, bytesValue_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated bytes bytesValue = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearBytesValue() {
      bytesValue_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.IntList int32Value_ = emptyIntList();
    private void ensureInt32ValueIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        int32Value_ = mutableCopy(int32Value_);
        bitField0_ |= 0x00000008;
       }
    }
    /**
     * <code>repeated int32 int32Value = 4;</code>
     * @return A list containing the int32Value.
     */
    public java.util.List<java.lang.Integer>
        getInt32ValueList() {
      return ((bitField0_ & 0x00000008) != 0) ?
               java.util.Collections.unmodifiableList(int32Value_) : int32Value_;
    }
    /**
     * <code>repeated int32 int32Value = 4;</code>
     * @return The count of int32Value.
     */
    public int getInt32ValueCount() {
      return int32Value_.size();
    }
    /**
     * <code>repeated int32 int32Value = 4;</code>
     * @param index The index of the element to return.
     * @return The int32Value at the given index.
     */
    public int getInt32Value(int index) {
      return int32Value_.getInt(index);
    }
    /**
     * <code>repeated int32 int32Value = 4;</code>
     * @param index The index to set the value at.
     * @param value The int32Value to set.
     * @return This builder for chaining.
     */
    public Builder setInt32Value(
        int index, int value) {
      ensureInt32ValueIsMutable();
      int32Value_.setInt(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 int32Value = 4;</code>
     * @param value The int32Value to add.
     * @return This builder for chaining.
     */
    public Builder addInt32Value(int value) {
      ensureInt32ValueIsMutable();
      int32Value_.addInt(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 int32Value = 4;</code>
     * @param values The int32Value to add.
     * @return This builder for chaining.
     */
    public Builder addAllInt32Value(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureInt32ValueIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, int32Value_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 int32Value = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearInt32Value() {
      int32Value_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.IntList fixed32Value_ = emptyIntList();
    private void ensureFixed32ValueIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        fixed32Value_ = mutableCopy(fixed32Value_);
        bitField0_ |= 0x00000010;
       }
    }
    /**
     * <code>repeated fixed32 fixed32Value = 5;</code>
     * @return A list containing the fixed32Value.
     */
    public java.util.List<java.lang.Integer>
        getFixed32ValueList() {
      return ((bitField0_ & 0x00000010) != 0) ?
               java.util.Collections.unmodifiableList(fixed32Value_) : fixed32Value_;
    }
    /**
     * <code>repeated fixed32 fixed32Value = 5;</code>
     * @return The count of fixed32Value.
     */
    public int getFixed32ValueCount() {
      return fixed32Value_.size();
    }
    /**
     * <code>repeated fixed32 fixed32Value = 5;</code>
     * @param index The index of the element to return.
     * @return The fixed32Value at the given index.
     */
    public int getFixed32Value(int index) {
      return fixed32Value_.getInt(index);
    }
    /**
     * <code>repeated fixed32 fixed32Value = 5;</code>
     * @param index The index to set the value at.
     * @param value The fixed32Value to set.
     * @return This builder for chaining.
     */
    public Builder setFixed32Value(
        int index, int value) {
      ensureFixed32ValueIsMutable();
      fixed32Value_.setInt(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated fixed32 fixed32Value = 5;</code>
     * @param value The fixed32Value to add.
     * @return This builder for chaining.
     */
    public Builder addFixed32Value(int value) {
      ensureFixed32ValueIsMutable();
      fixed32Value_.addInt(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated fixed32 fixed32Value = 5;</code>
     * @param values The fixed32Value to add.
     * @return This builder for chaining.
     */
    public Builder addAllFixed32Value(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureFixed32ValueIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, fixed32Value_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated fixed32 fixed32Value = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearFixed32Value() {
      fixed32Value_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.IntList uint32Value_ = emptyIntList();
    private void ensureUint32ValueIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        uint32Value_ = mutableCopy(uint32Value_);
        bitField0_ |= 0x00000020;
       }
    }
    /**
     * <code>repeated uint32 uint32Value = 6;</code>
     * @return A list containing the uint32Value.
     */
    public java.util.List<java.lang.Integer>
        getUint32ValueList() {
      return ((bitField0_ & 0x00000020) != 0) ?
               java.util.Collections.unmodifiableList(uint32Value_) : uint32Value_;
    }
    /**
     * <code>repeated uint32 uint32Value = 6;</code>
     * @return The count of uint32Value.
     */
    public int getUint32ValueCount() {
      return uint32Value_.size();
    }
    /**
     * <code>repeated uint32 uint32Value = 6;</code>
     * @param index The index of the element to return.
     * @return The uint32Value at the given index.
     */
    public int getUint32Value(int index) {
      return uint32Value_.getInt(index);
    }
    /**
     * <code>repeated uint32 uint32Value = 6;</code>
     * @param index The index to set the value at.
     * @param value The uint32Value to set.
     * @return This builder for chaining.
     */
    public Builder setUint32Value(
        int index, int value) {
      ensureUint32ValueIsMutable();
      uint32Value_.setInt(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated uint32 uint32Value = 6;</code>
     * @param value The uint32Value to add.
     * @return This builder for chaining.
     */
    public Builder addUint32Value(int value) {
      ensureUint32ValueIsMutable();
      uint32Value_.addInt(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated uint32 uint32Value = 6;</code>
     * @param values The uint32Value to add.
     * @return This builder for chaining.
     */
    public Builder addAllUint32Value(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureUint32ValueIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, uint32Value_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated uint32 uint32Value = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearUint32Value() {
      uint32Value_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.LongList int64Value_ = emptyLongList();
    private void ensureInt64ValueIsMutable() {
      if (!((bitField0_ & 0x00000040) != 0)) {
        int64Value_ = mutableCopy(int64Value_);
        bitField0_ |= 0x00000040;
       }
    }
    /**
     * <code>repeated int64 int64Value = 7;</code>
     * @return A list containing the int64Value.
     */
    public java.util.List<java.lang.Long>
        getInt64ValueList() {
      return ((bitField0_ & 0x00000040) != 0) ?
               java.util.Collections.unmodifiableList(int64Value_) : int64Value_;
    }
    /**
     * <code>repeated int64 int64Value = 7;</code>
     * @return The count of int64Value.
     */
    public int getInt64ValueCount() {
      return int64Value_.size();
    }
    /**
     * <code>repeated int64 int64Value = 7;</code>
     * @param index The index of the element to return.
     * @return The int64Value at the given index.
     */
    public long getInt64Value(int index) {
      return int64Value_.getLong(index);
    }
    /**
     * <code>repeated int64 int64Value = 7;</code>
     * @param index The index to set the value at.
     * @param value The int64Value to set.
     * @return This builder for chaining.
     */
    public Builder setInt64Value(
        int index, long value) {
      ensureInt64ValueIsMutable();
      int64Value_.setLong(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int64 int64Value = 7;</code>
     * @param value The int64Value to add.
     * @return This builder for chaining.
     */
    public Builder addInt64Value(long value) {
      ensureInt64ValueIsMutable();
      int64Value_.addLong(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int64 int64Value = 7;</code>
     * @param values The int64Value to add.
     * @return This builder for chaining.
     */
    public Builder addAllInt64Value(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureInt64ValueIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, int64Value_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int64 int64Value = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearInt64Value() {
      int64Value_ = emptyLongList();
      bitField0_ = (bitField0_ & ~0x00000040);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.LongList fixed64Value_ = emptyLongList();
    private void ensureFixed64ValueIsMutable() {
      if (!((bitField0_ & 0x00000080) != 0)) {
        fixed64Value_ = mutableCopy(fixed64Value_);
        bitField0_ |= 0x00000080;
       }
    }
    /**
     * <code>repeated fixed64 fixed64Value = 8;</code>
     * @return A list containing the fixed64Value.
     */
    public java.util.List<java.lang.Long>
        getFixed64ValueList() {
      return ((bitField0_ & 0x00000080) != 0) ?
               java.util.Collections.unmodifiableList(fixed64Value_) : fixed64Value_;
    }
    /**
     * <code>repeated fixed64 fixed64Value = 8;</code>
     * @return The count of fixed64Value.
     */
    public int getFixed64ValueCount() {
      return fixed64Value_.size();
    }
    /**
     * <code>repeated fixed64 fixed64Value = 8;</code>
     * @param index The index of the element to return.
     * @return The fixed64Value at the given index.
     */
    public long getFixed64Value(int index) {
      return fixed64Value_.getLong(index);
    }
    /**
     * <code>repeated fixed64 fixed64Value = 8;</code>
     * @param index The index to set the value at.
     * @param value The fixed64Value to set.
     * @return This builder for chaining.
     */
    public Builder setFixed64Value(
        int index, long value) {
      ensureFixed64ValueIsMutable();
      fixed64Value_.setLong(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated fixed64 fixed64Value = 8;</code>
     * @param value The fixed64Value to add.
     * @return This builder for chaining.
     */
    public Builder addFixed64Value(long value) {
      ensureFixed64ValueIsMutable();
      fixed64Value_.addLong(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated fixed64 fixed64Value = 8;</code>
     * @param values The fixed64Value to add.
     * @return This builder for chaining.
     */
    public Builder addAllFixed64Value(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureFixed64ValueIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, fixed64Value_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated fixed64 fixed64Value = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearFixed64Value() {
      fixed64Value_ = emptyLongList();
      bitField0_ = (bitField0_ & ~0x00000080);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.LongList uint64Value_ = emptyLongList();
    private void ensureUint64ValueIsMutable() {
      if (!((bitField0_ & 0x00000100) != 0)) {
        uint64Value_ = mutableCopy(uint64Value_);
        bitField0_ |= 0x00000100;
       }
    }
    /**
     * <code>repeated uint64 uint64Value = 9;</code>
     * @return A list containing the uint64Value.
     */
    public java.util.List<java.lang.Long>
        getUint64ValueList() {
      return ((bitField0_ & 0x00000100) != 0) ?
               java.util.Collections.unmodifiableList(uint64Value_) : uint64Value_;
    }
    /**
     * <code>repeated uint64 uint64Value = 9;</code>
     * @return The count of uint64Value.
     */
    public int getUint64ValueCount() {
      return uint64Value_.size();
    }
    /**
     * <code>repeated uint64 uint64Value = 9;</code>
     * @param index The index of the element to return.
     * @return The uint64Value at the given index.
     */
    public long getUint64Value(int index) {
      return uint64Value_.getLong(index);
    }
    /**
     * <code>repeated uint64 uint64Value = 9;</code>
     * @param index The index to set the value at.
     * @param value The uint64Value to set.
     * @return This builder for chaining.
     */
    public Builder setUint64Value(
        int index, long value) {
      ensureUint64ValueIsMutable();
      uint64Value_.setLong(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated uint64 uint64Value = 9;</code>
     * @param value The uint64Value to add.
     * @return This builder for chaining.
     */
    public Builder addUint64Value(long value) {
      ensureUint64ValueIsMutable();
      uint64Value_.addLong(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated uint64 uint64Value = 9;</code>
     * @param values The uint64Value to add.
     * @return This builder for chaining.
     */
    public Builder addAllUint64Value(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureUint64ValueIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, uint64Value_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated uint64 uint64Value = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearUint64Value() {
      uint64Value_ = emptyLongList();
      bitField0_ = (bitField0_ & ~0x00000100);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList floatValue_ = emptyFloatList();
    private void ensureFloatValueIsMutable() {
      if (!((bitField0_ & 0x00000200) != 0)) {
        floatValue_ = mutableCopy(floatValue_);
        bitField0_ |= 0x00000200;
       }
    }
    /**
     * <code>repeated float floatValue = 10;</code>
     * @return A list containing the floatValue.
     */
    public java.util.List<java.lang.Float>
        getFloatValueList() {
      return ((bitField0_ & 0x00000200) != 0) ?
               java.util.Collections.unmodifiableList(floatValue_) : floatValue_;
    }
    /**
     * <code>repeated float floatValue = 10;</code>
     * @return The count of floatValue.
     */
    public int getFloatValueCount() {
      return floatValue_.size();
    }
    /**
     * <code>repeated float floatValue = 10;</code>
     * @param index The index of the element to return.
     * @return The floatValue at the given index.
     */
    public float getFloatValue(int index) {
      return floatValue_.getFloat(index);
    }
    /**
     * <code>repeated float floatValue = 10;</code>
     * @param index The index to set the value at.
     * @param value The floatValue to set.
     * @return This builder for chaining.
     */
    public Builder setFloatValue(
        int index, float value) {
      ensureFloatValueIsMutable();
      floatValue_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float floatValue = 10;</code>
     * @param value The floatValue to add.
     * @return This builder for chaining.
     */
    public Builder addFloatValue(float value) {
      ensureFloatValueIsMutable();
      floatValue_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float floatValue = 10;</code>
     * @param values The floatValue to add.
     * @return This builder for chaining.
     */
    public Builder addAllFloatValue(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureFloatValueIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, floatValue_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float floatValue = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearFloatValue() {
      floatValue_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000200);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.DoubleList doubleValue_ = emptyDoubleList();
    private void ensureDoubleValueIsMutable() {
      if (!((bitField0_ & 0x00000400) != 0)) {
        doubleValue_ = mutableCopy(doubleValue_);
        bitField0_ |= 0x00000400;
       }
    }
    /**
     * <code>repeated double doubleValue = 11;</code>
     * @return A list containing the doubleValue.
     */
    public java.util.List<java.lang.Double>
        getDoubleValueList() {
      return ((bitField0_ & 0x00000400) != 0) ?
               java.util.Collections.unmodifiableList(doubleValue_) : doubleValue_;
    }
    /**
     * <code>repeated double doubleValue = 11;</code>
     * @return The count of doubleValue.
     */
    public int getDoubleValueCount() {
      return doubleValue_.size();
    }
    /**
     * <code>repeated double doubleValue = 11;</code>
     * @param index The index of the element to return.
     * @return The doubleValue at the given index.
     */
    public double getDoubleValue(int index) {
      return doubleValue_.getDouble(index);
    }
    /**
     * <code>repeated double doubleValue = 11;</code>
     * @param index The index to set the value at.
     * @param value The doubleValue to set.
     * @return This builder for chaining.
     */
    public Builder setDoubleValue(
        int index, double value) {
      ensureDoubleValueIsMutable();
      doubleValue_.setDouble(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated double doubleValue = 11;</code>
     * @param value The doubleValue to add.
     * @return This builder for chaining.
     */
    public Builder addDoubleValue(double value) {
      ensureDoubleValueIsMutable();
      doubleValue_.addDouble(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated double doubleValue = 11;</code>
     * @param values The doubleValue to add.
     * @return This builder for chaining.
     */
    public Builder addAllDoubleValue(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureDoubleValueIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, doubleValue_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated double doubleValue = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearDoubleValue() {
      doubleValue_ = emptyDoubleList();
      bitField0_ = (bitField0_ & ~0x00000400);
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Integer> enumValue_ =
      java.util.Collections.emptyList();
    private void ensureEnumValueIsMutable() {
      if (!((bitField0_ & 0x00000800) != 0)) {
        enumValue_ = new java.util.ArrayList<java.lang.Integer>(enumValue_);
        bitField0_ |= 0x00000800;
      }
    }
    /**
     * <code>repeated .ref.parse.EnumType enumValue = 12;</code>
     * @return A list containing the enumValue.
     */
    public java.util.List<com.examples.protobuf.map.EnumType> getEnumValueList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, com.examples.protobuf.map.EnumType>(enumValue_, enumValue_converter_);
    }
    /**
     * <code>repeated .ref.parse.EnumType enumValue = 12;</code>
     * @return The count of enumValue.
     */
    public int getEnumValueCount() {
      return enumValue_.size();
    }
    /**
     * <code>repeated .ref.parse.EnumType enumValue = 12;</code>
     * @param index The index of the element to return.
     * @return The enumValue at the given index.
     */
    public com.examples.protobuf.map.EnumType getEnumValue(int index) {
      return enumValue_converter_.convert(enumValue_.get(index));
    }
    /**
     * <code>repeated .ref.parse.EnumType enumValue = 12;</code>
     * @param index The index to set the value at.
     * @param value The enumValue to set.
     * @return This builder for chaining.
     */
    public Builder setEnumValue(
        int index, com.examples.protobuf.map.EnumType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureEnumValueIsMutable();
      enumValue_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .ref.parse.EnumType enumValue = 12;</code>
     * @param value The enumValue to add.
     * @return This builder for chaining.
     */
    public Builder addEnumValue(com.examples.protobuf.map.EnumType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureEnumValueIsMutable();
      enumValue_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .ref.parse.EnumType enumValue = 12;</code>
     * @param values The enumValue to add.
     * @return This builder for chaining.
     */
    public Builder addAllEnumValue(
        java.lang.Iterable<? extends com.examples.protobuf.map.EnumType> values) {
      ensureEnumValueIsMutable();
      for (com.examples.protobuf.map.EnumType value : values) {
        enumValue_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <code>repeated .ref.parse.EnumType enumValue = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearEnumValue() {
      enumValue_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000800);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .ref.parse.EnumType enumValue = 12;</code>
     * @return A list containing the enum numeric values on the wire for enumValue.
     */
    public java.util.List<java.lang.Integer>
    getEnumValueValueList() {
      return java.util.Collections.unmodifiableList(enumValue_);
    }
    /**
     * <code>repeated .ref.parse.EnumType enumValue = 12;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of enumValue at the given index.
     */
    public int getEnumValueValue(int index) {
      return enumValue_.get(index);
    }
    /**
     * <code>repeated .ref.parse.EnumType enumValue = 12;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of enumValue at the given index.
     * @return This builder for chaining.
     */
    public Builder setEnumValueValue(
        int index, int value) {
      ensureEnumValueIsMutable();
      enumValue_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .ref.parse.EnumType enumValue = 12;</code>
     * @param value The enum numeric value on the wire for enumValue to add.
     * @return This builder for chaining.
     */
    public Builder addEnumValueValue(int value) {
      ensureEnumValueIsMutable();
      enumValue_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .ref.parse.EnumType enumValue = 12;</code>
     * @param values The enum numeric values on the wire for enumValue to add.
     * @return This builder for chaining.
     */
    public Builder addAllEnumValueValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureEnumValueIsMutable();
      for (int value : values) {
        enumValue_.add(value);
      }
      onChanged();
      return this;
    }

    private java.util.List<com.examples.protobuf.map.ReferenceMessageType> referenceValue_ =
      java.util.Collections.emptyList();
    private void ensureReferenceValueIsMutable() {
      if (!((bitField0_ & 0x00001000) != 0)) {
        referenceValue_ = new java.util.ArrayList<com.examples.protobuf.map.ReferenceMessageType>(referenceValue_);
        bitField0_ |= 0x00001000;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.examples.protobuf.map.ReferenceMessageType, com.examples.protobuf.map.ReferenceMessageType.Builder, com.examples.protobuf.map.ReferenceMessageTypeOrBuilder> referenceValueBuilder_;

    /**
     * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
     */
    public java.util.List<com.examples.protobuf.map.ReferenceMessageType> getReferenceValueList() {
      if (referenceValueBuilder_ == null) {
        return java.util.Collections.unmodifiableList(referenceValue_);
      } else {
        return referenceValueBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
     */
    public int getReferenceValueCount() {
      if (referenceValueBuilder_ == null) {
        return referenceValue_.size();
      } else {
        return referenceValueBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
     */
    public com.examples.protobuf.map.ReferenceMessageType getReferenceValue(int index) {
      if (referenceValueBuilder_ == null) {
        return referenceValue_.get(index);
      } else {
        return referenceValueBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
     */
    public Builder setReferenceValue(
        int index, com.examples.protobuf.map.ReferenceMessageType value) {
      if (referenceValueBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReferenceValueIsMutable();
        referenceValue_.set(index, value);
        onChanged();
      } else {
        referenceValueBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
     */
    public Builder setReferenceValue(
        int index, com.examples.protobuf.map.ReferenceMessageType.Builder builderForValue) {
      if (referenceValueBuilder_ == null) {
        ensureReferenceValueIsMutable();
        referenceValue_.set(index, builderForValue.build());
        onChanged();
      } else {
        referenceValueBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
     */
    public Builder addReferenceValue(com.examples.protobuf.map.ReferenceMessageType value) {
      if (referenceValueBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReferenceValueIsMutable();
        referenceValue_.add(value);
        onChanged();
      } else {
        referenceValueBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
     */
    public Builder addReferenceValue(
        int index, com.examples.protobuf.map.ReferenceMessageType value) {
      if (referenceValueBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReferenceValueIsMutable();
        referenceValue_.add(index, value);
        onChanged();
      } else {
        referenceValueBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
     */
    public Builder addReferenceValue(
        com.examples.protobuf.map.ReferenceMessageType.Builder builderForValue) {
      if (referenceValueBuilder_ == null) {
        ensureReferenceValueIsMutable();
        referenceValue_.add(builderForValue.build());
        onChanged();
      } else {
        referenceValueBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
     */
    public Builder addReferenceValue(
        int index, com.examples.protobuf.map.ReferenceMessageType.Builder builderForValue) {
      if (referenceValueBuilder_ == null) {
        ensureReferenceValueIsMutable();
        referenceValue_.add(index, builderForValue.build());
        onChanged();
      } else {
        referenceValueBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
     */
    public Builder addAllReferenceValue(
        java.lang.Iterable<? extends com.examples.protobuf.map.ReferenceMessageType> values) {
      if (referenceValueBuilder_ == null) {
        ensureReferenceValueIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, referenceValue_);
        onChanged();
      } else {
        referenceValueBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
     */
    public Builder clearReferenceValue() {
      if (referenceValueBuilder_ == null) {
        referenceValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
      } else {
        referenceValueBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
     */
    public Builder removeReferenceValue(int index) {
      if (referenceValueBuilder_ == null) {
        ensureReferenceValueIsMutable();
        referenceValue_.remove(index);
        onChanged();
      } else {
        referenceValueBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
     */
    public com.examples.protobuf.map.ReferenceMessageType.Builder getReferenceValueBuilder(
        int index) {
      return getReferenceValueFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
     */
    public com.examples.protobuf.map.ReferenceMessageTypeOrBuilder getReferenceValueOrBuilder(
        int index) {
      if (referenceValueBuilder_ == null) {
        return referenceValue_.get(index);  } else {
        return referenceValueBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
     */
    public java.util.List<? extends com.examples.protobuf.map.ReferenceMessageTypeOrBuilder> 
         getReferenceValueOrBuilderList() {
      if (referenceValueBuilder_ != null) {
        return referenceValueBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(referenceValue_);
      }
    }
    /**
     * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
     */
    public com.examples.protobuf.map.ReferenceMessageType.Builder addReferenceValueBuilder() {
      return getReferenceValueFieldBuilder().addBuilder(
          com.examples.protobuf.map.ReferenceMessageType.getDefaultInstance());
    }
    /**
     * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
     */
    public com.examples.protobuf.map.ReferenceMessageType.Builder addReferenceValueBuilder(
        int index) {
      return getReferenceValueFieldBuilder().addBuilder(
          index, com.examples.protobuf.map.ReferenceMessageType.getDefaultInstance());
    }
    /**
     * <code>repeated .ref.parse.ReferenceMessageType referenceValue = 13;</code>
     */
    public java.util.List<com.examples.protobuf.map.ReferenceMessageType.Builder> 
         getReferenceValueBuilderList() {
      return getReferenceValueFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.examples.protobuf.map.ReferenceMessageType, com.examples.protobuf.map.ReferenceMessageType.Builder, com.examples.protobuf.map.ReferenceMessageTypeOrBuilder> 
        getReferenceValueFieldBuilder() {
      if (referenceValueBuilder_ == null) {
        referenceValueBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.examples.protobuf.map.ReferenceMessageType, com.examples.protobuf.map.ReferenceMessageType.Builder, com.examples.protobuf.map.ReferenceMessageTypeOrBuilder>(
                referenceValue_,
                ((bitField0_ & 0x00001000) != 0),
                getParentForChildren(),
                isClean());
        referenceValue_ = null;
      }
      return referenceValueBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:ref.parse.ListMessageType)
  }

  // @@protoc_insertion_point(class_scope:ref.parse.ListMessageType)
  private static final com.examples.protobuf.map.ListMessageType DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.examples.protobuf.map.ListMessageType();
  }

  public static com.examples.protobuf.map.ListMessageType getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ListMessageType>
      PARSER = new com.google.protobuf.AbstractParser<ListMessageType>() {
    @java.lang.Override
    public ListMessageType parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ListMessageType(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ListMessageType> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ListMessageType> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.examples.protobuf.map.ListMessageType getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

