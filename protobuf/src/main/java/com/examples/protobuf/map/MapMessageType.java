// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

package com.examples.protobuf.map;

/**
 * Protobuf type {@code ref.parse.MapMessageType}
 */
public final class MapMessageType extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:ref.parse.MapMessageType)
    MapMessageTypeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use MapMessageType.newBuilder() to construct.
  private MapMessageType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private MapMessageType() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new MapMessageType();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private MapMessageType(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              boolValue_ = com.google.protobuf.MapField.newMapField(
                  BoolValueDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000001;
            }
            com.google.protobuf.MapEntry<java.lang.Boolean, java.lang.Boolean>
            boolValue__ = input.readMessage(
                BoolValueDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            boolValue_.getMutableMap().put(
                boolValue__.getKey(), boolValue__.getValue());
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              stringValue_ = com.google.protobuf.MapField.newMapField(
                  StringValueDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000002;
            }
            com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
            stringValue__ = input.readMessage(
                StringValueDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            stringValue_.getMutableMap().put(
                stringValue__.getKey(), stringValue__.getValue());
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              bytesValue_ = com.google.protobuf.MapField.newMapField(
                  BytesValueDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000004;
            }
            com.google.protobuf.MapEntry<java.lang.String, com.google.protobuf.ByteString>
            bytesValue__ = input.readMessage(
                BytesValueDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            bytesValue_.getMutableMap().put(
                bytesValue__.getKey(), bytesValue__.getValue());
            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000008) != 0)) {
              int32Value_ = com.google.protobuf.MapField.newMapField(
                  Int32ValueDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000008;
            }
            com.google.protobuf.MapEntry<java.lang.Integer, java.lang.Integer>
            int32Value__ = input.readMessage(
                Int32ValueDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            int32Value_.getMutableMap().put(
                int32Value__.getKey(), int32Value__.getValue());
            break;
          }
          case 42: {
            if (!((mutable_bitField0_ & 0x00000010) != 0)) {
              fixed32Value_ = com.google.protobuf.MapField.newMapField(
                  Fixed32ValueDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000010;
            }
            com.google.protobuf.MapEntry<java.lang.Integer, java.lang.Integer>
            fixed32Value__ = input.readMessage(
                Fixed32ValueDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            fixed32Value_.getMutableMap().put(
                fixed32Value__.getKey(), fixed32Value__.getValue());
            break;
          }
          case 50: {
            if (!((mutable_bitField0_ & 0x00000020) != 0)) {
              uint32Value_ = com.google.protobuf.MapField.newMapField(
                  Uint32ValueDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000020;
            }
            com.google.protobuf.MapEntry<java.lang.Integer, java.lang.Integer>
            uint32Value__ = input.readMessage(
                Uint32ValueDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            uint32Value_.getMutableMap().put(
                uint32Value__.getKey(), uint32Value__.getValue());
            break;
          }
          case 58: {
            if (!((mutable_bitField0_ & 0x00000040) != 0)) {
              int64Value_ = com.google.protobuf.MapField.newMapField(
                  Int64ValueDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000040;
            }
            com.google.protobuf.MapEntry<java.lang.Long, java.lang.Long>
            int64Value__ = input.readMessage(
                Int64ValueDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            int64Value_.getMutableMap().put(
                int64Value__.getKey(), int64Value__.getValue());
            break;
          }
          case 66: {
            if (!((mutable_bitField0_ & 0x00000080) != 0)) {
              fixed64Value_ = com.google.protobuf.MapField.newMapField(
                  Fixed64ValueDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000080;
            }
            com.google.protobuf.MapEntry<java.lang.Long, java.lang.Long>
            fixed64Value__ = input.readMessage(
                Fixed64ValueDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            fixed64Value_.getMutableMap().put(
                fixed64Value__.getKey(), fixed64Value__.getValue());
            break;
          }
          case 74: {
            if (!((mutable_bitField0_ & 0x00000100) != 0)) {
              uint64Value_ = com.google.protobuf.MapField.newMapField(
                  Uint64ValueDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000100;
            }
            com.google.protobuf.MapEntry<java.lang.Long, java.lang.Long>
            uint64Value__ = input.readMessage(
                Uint64ValueDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            uint64Value_.getMutableMap().put(
                uint64Value__.getKey(), uint64Value__.getValue());
            break;
          }
          case 82: {
            if (!((mutable_bitField0_ & 0x00000200) != 0)) {
              floatValue_ = com.google.protobuf.MapField.newMapField(
                  FloatValueDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000200;
            }
            com.google.protobuf.MapEntry<java.lang.String, java.lang.Float>
            floatValue__ = input.readMessage(
                FloatValueDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            floatValue_.getMutableMap().put(
                floatValue__.getKey(), floatValue__.getValue());
            break;
          }
          case 90: {
            if (!((mutable_bitField0_ & 0x00000400) != 0)) {
              doubleValue_ = com.google.protobuf.MapField.newMapField(
                  DoubleValueDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000400;
            }
            com.google.protobuf.MapEntry<java.lang.String, java.lang.Double>
            doubleValue__ = input.readMessage(
                DoubleValueDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            doubleValue_.getMutableMap().put(
                doubleValue__.getKey(), doubleValue__.getValue());
            break;
          }
          case 98: {
            if (!((mutable_bitField0_ & 0x00000800) != 0)) {
              enumValue_ = com.google.protobuf.MapField.newMapField(
                  EnumValueDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000800;
            }
            com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
            enumValue__ = input.readMessage(
                EnumValueDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            enumValue_.getMutableMap().put(
                enumValue__.getKey(), enumValue__.getValue());
            break;
          }
          case 106: {
            if (!((mutable_bitField0_ & 0x00001000) != 0)) {
              referenceValue_ = com.google.protobuf.MapField.newMapField(
                  ReferenceValueDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00001000;
            }
            com.google.protobuf.MapEntry<java.lang.String, com.examples.protobuf.map.ReferenceMessageType>
            referenceValue__ = input.readMessage(
                ReferenceValueDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            referenceValue_.getMutableMap().put(
                referenceValue__.getKey(), referenceValue__.getValue());
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.examples.protobuf.map.Map.internal_static_ref_parse_MapMessageType_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 1:
        return internalGetBoolValue();
      case 2:
        return internalGetStringValue();
      case 3:
        return internalGetBytesValue();
      case 4:
        return internalGetInt32Value();
      case 5:
        return internalGetFixed32Value();
      case 6:
        return internalGetUint32Value();
      case 7:
        return internalGetInt64Value();
      case 8:
        return internalGetFixed64Value();
      case 9:
        return internalGetUint64Value();
      case 10:
        return internalGetFloatValue();
      case 11:
        return internalGetDoubleValue();
      case 12:
        return internalGetEnumValue();
      case 13:
        return internalGetReferenceValue();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.examples.protobuf.map.Map.internal_static_ref_parse_MapMessageType_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.examples.protobuf.map.MapMessageType.class, com.examples.protobuf.map.MapMessageType.Builder.class);
  }

  public static final int BOOLVALUE_FIELD_NUMBER = 1;
  private static final class BoolValueDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.Boolean, java.lang.Boolean> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.Boolean, java.lang.Boolean>newDefaultInstance(
                com.examples.protobuf.map.Map.internal_static_ref_parse_MapMessageType_BoolValueEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.BOOL,
                false,
                com.google.protobuf.WireFormat.FieldType.BOOL,
                false);
  }
  private com.google.protobuf.MapField<
      java.lang.Boolean, java.lang.Boolean> boolValue_;
  private com.google.protobuf.MapField<java.lang.Boolean, java.lang.Boolean>
  internalGetBoolValue() {
    if (boolValue_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          BoolValueDefaultEntryHolder.defaultEntry);
    }
    return boolValue_;
  }

  public int getBoolValueCount() {
    return internalGetBoolValue().getMap().size();
  }
  /**
   * <code>map&lt;bool, bool&gt; boolValue = 1;</code>
   */

  @java.lang.Override
  public boolean containsBoolValue(
      boolean key) {
    
    return internalGetBoolValue().getMap().containsKey(key);
  }
  /**
   * Use {@link #getBoolValueMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.Boolean, java.lang.Boolean> getBoolValue() {
    return getBoolValueMap();
  }
  /**
   * <code>map&lt;bool, bool&gt; boolValue = 1;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.Boolean, java.lang.Boolean> getBoolValueMap() {
    return internalGetBoolValue().getMap();
  }
  /**
   * <code>map&lt;bool, bool&gt; boolValue = 1;</code>
   */
  @java.lang.Override

  public boolean getBoolValueOrDefault(
      boolean key,
      boolean defaultValue) {
    
    java.util.Map<java.lang.Boolean, java.lang.Boolean> map =
        internalGetBoolValue().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;bool, bool&gt; boolValue = 1;</code>
   */
  @java.lang.Override

  public boolean getBoolValueOrThrow(
      boolean key) {
    
    java.util.Map<java.lang.Boolean, java.lang.Boolean> map =
        internalGetBoolValue().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int STRINGVALUE_FIELD_NUMBER = 2;
  private static final class StringValueDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.String>newDefaultInstance(
                com.examples.protobuf.map.Map.internal_static_ref_parse_MapMessageType_StringValueEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.String> stringValue_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
  internalGetStringValue() {
    if (stringValue_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          StringValueDefaultEntryHolder.defaultEntry);
    }
    return stringValue_;
  }

  public int getStringValueCount() {
    return internalGetStringValue().getMap().size();
  }
  /**
   * <code>map&lt;string, string&gt; stringValue = 2;</code>
   */

  @java.lang.Override
  public boolean containsStringValue(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetStringValue().getMap().containsKey(key);
  }
  /**
   * Use {@link #getStringValueMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getStringValue() {
    return getStringValueMap();
  }
  /**
   * <code>map&lt;string, string&gt; stringValue = 2;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, java.lang.String> getStringValueMap() {
    return internalGetStringValue().getMap();
  }
  /**
   * <code>map&lt;string, string&gt; stringValue = 2;</code>
   */
  @java.lang.Override

  public java.lang.String getStringValueOrDefault(
      java.lang.String key,
      java.lang.String defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetStringValue().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, string&gt; stringValue = 2;</code>
   */
  @java.lang.Override

  public java.lang.String getStringValueOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetStringValue().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int BYTESVALUE_FIELD_NUMBER = 3;
  private static final class BytesValueDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.google.protobuf.ByteString> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.google.protobuf.ByteString>newDefaultInstance(
                com.examples.protobuf.map.Map.internal_static_ref_parse_MapMessageType_BytesValueEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.BYTES,
                com.google.protobuf.ByteString.EMPTY);
  }
  private com.google.protobuf.MapField<
      java.lang.String, com.google.protobuf.ByteString> bytesValue_;
  private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.ByteString>
  internalGetBytesValue() {
    if (bytesValue_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          BytesValueDefaultEntryHolder.defaultEntry);
    }
    return bytesValue_;
  }

  public int getBytesValueCount() {
    return internalGetBytesValue().getMap().size();
  }
  /**
   * <code>map&lt;string, bytes&gt; bytesValue = 3;</code>
   */

  @java.lang.Override
  public boolean containsBytesValue(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetBytesValue().getMap().containsKey(key);
  }
  /**
   * Use {@link #getBytesValueMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getBytesValue() {
    return getBytesValueMap();
  }
  /**
   * <code>map&lt;string, bytes&gt; bytesValue = 3;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getBytesValueMap() {
    return internalGetBytesValue().getMap();
  }
  /**
   * <code>map&lt;string, bytes&gt; bytesValue = 3;</code>
   */
  @java.lang.Override

  public com.google.protobuf.ByteString getBytesValueOrDefault(
      java.lang.String key,
      com.google.protobuf.ByteString defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
        internalGetBytesValue().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, bytes&gt; bytesValue = 3;</code>
   */
  @java.lang.Override

  public com.google.protobuf.ByteString getBytesValueOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
        internalGetBytesValue().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int INT32VALUE_FIELD_NUMBER = 4;
  private static final class Int32ValueDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.Integer, java.lang.Integer> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                com.examples.protobuf.map.Map.internal_static_ref_parse_MapMessageType_Int32ValueEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.INT32,
                0,
                com.google.protobuf.WireFormat.FieldType.INT32,
                0);
  }
  private com.google.protobuf.MapField<
      java.lang.Integer, java.lang.Integer> int32Value_;
  private com.google.protobuf.MapField<java.lang.Integer, java.lang.Integer>
  internalGetInt32Value() {
    if (int32Value_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          Int32ValueDefaultEntryHolder.defaultEntry);
    }
    return int32Value_;
  }

  public int getInt32ValueCount() {
    return internalGetInt32Value().getMap().size();
  }
  /**
   * <code>map&lt;int32, int32&gt; int32Value = 4;</code>
   */

  @java.lang.Override
  public boolean containsInt32Value(
      int key) {
    
    return internalGetInt32Value().getMap().containsKey(key);
  }
  /**
   * Use {@link #getInt32ValueMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.Integer, java.lang.Integer> getInt32Value() {
    return getInt32ValueMap();
  }
  /**
   * <code>map&lt;int32, int32&gt; int32Value = 4;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.Integer, java.lang.Integer> getInt32ValueMap() {
    return internalGetInt32Value().getMap();
  }
  /**
   * <code>map&lt;int32, int32&gt; int32Value = 4;</code>
   */
  @java.lang.Override

  public int getInt32ValueOrDefault(
      int key,
      int defaultValue) {
    
    java.util.Map<java.lang.Integer, java.lang.Integer> map =
        internalGetInt32Value().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;int32, int32&gt; int32Value = 4;</code>
   */
  @java.lang.Override

  public int getInt32ValueOrThrow(
      int key) {
    
    java.util.Map<java.lang.Integer, java.lang.Integer> map =
        internalGetInt32Value().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int FIXED32VALUE_FIELD_NUMBER = 5;
  private static final class Fixed32ValueDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.Integer, java.lang.Integer> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                com.examples.protobuf.map.Map.internal_static_ref_parse_MapMessageType_Fixed32ValueEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.FIXED32,
                0,
                com.google.protobuf.WireFormat.FieldType.FIXED32,
                0);
  }
  private com.google.protobuf.MapField<
      java.lang.Integer, java.lang.Integer> fixed32Value_;
  private com.google.protobuf.MapField<java.lang.Integer, java.lang.Integer>
  internalGetFixed32Value() {
    if (fixed32Value_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          Fixed32ValueDefaultEntryHolder.defaultEntry);
    }
    return fixed32Value_;
  }

  public int getFixed32ValueCount() {
    return internalGetFixed32Value().getMap().size();
  }
  /**
   * <code>map&lt;fixed32, fixed32&gt; fixed32Value = 5;</code>
   */

  @java.lang.Override
  public boolean containsFixed32Value(
      int key) {
    
    return internalGetFixed32Value().getMap().containsKey(key);
  }
  /**
   * Use {@link #getFixed32ValueMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.Integer, java.lang.Integer> getFixed32Value() {
    return getFixed32ValueMap();
  }
  /**
   * <code>map&lt;fixed32, fixed32&gt; fixed32Value = 5;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.Integer, java.lang.Integer> getFixed32ValueMap() {
    return internalGetFixed32Value().getMap();
  }
  /**
   * <code>map&lt;fixed32, fixed32&gt; fixed32Value = 5;</code>
   */
  @java.lang.Override

  public int getFixed32ValueOrDefault(
      int key,
      int defaultValue) {
    
    java.util.Map<java.lang.Integer, java.lang.Integer> map =
        internalGetFixed32Value().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;fixed32, fixed32&gt; fixed32Value = 5;</code>
   */
  @java.lang.Override

  public int getFixed32ValueOrThrow(
      int key) {
    
    java.util.Map<java.lang.Integer, java.lang.Integer> map =
        internalGetFixed32Value().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int UINT32VALUE_FIELD_NUMBER = 6;
  private static final class Uint32ValueDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.Integer, java.lang.Integer> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                com.examples.protobuf.map.Map.internal_static_ref_parse_MapMessageType_Uint32ValueEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.UINT32,
                0,
                com.google.protobuf.WireFormat.FieldType.UINT32,
                0);
  }
  private com.google.protobuf.MapField<
      java.lang.Integer, java.lang.Integer> uint32Value_;
  private com.google.protobuf.MapField<java.lang.Integer, java.lang.Integer>
  internalGetUint32Value() {
    if (uint32Value_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          Uint32ValueDefaultEntryHolder.defaultEntry);
    }
    return uint32Value_;
  }

  public int getUint32ValueCount() {
    return internalGetUint32Value().getMap().size();
  }
  /**
   * <code>map&lt;uint32, uint32&gt; uint32Value = 6;</code>
   */

  @java.lang.Override
  public boolean containsUint32Value(
      int key) {
    
    return internalGetUint32Value().getMap().containsKey(key);
  }
  /**
   * Use {@link #getUint32ValueMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.Integer, java.lang.Integer> getUint32Value() {
    return getUint32ValueMap();
  }
  /**
   * <code>map&lt;uint32, uint32&gt; uint32Value = 6;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.Integer, java.lang.Integer> getUint32ValueMap() {
    return internalGetUint32Value().getMap();
  }
  /**
   * <code>map&lt;uint32, uint32&gt; uint32Value = 6;</code>
   */
  @java.lang.Override

  public int getUint32ValueOrDefault(
      int key,
      int defaultValue) {
    
    java.util.Map<java.lang.Integer, java.lang.Integer> map =
        internalGetUint32Value().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;uint32, uint32&gt; uint32Value = 6;</code>
   */
  @java.lang.Override

  public int getUint32ValueOrThrow(
      int key) {
    
    java.util.Map<java.lang.Integer, java.lang.Integer> map =
        internalGetUint32Value().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int INT64VALUE_FIELD_NUMBER = 7;
  private static final class Int64ValueDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.Long, java.lang.Long> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.Long, java.lang.Long>newDefaultInstance(
                com.examples.protobuf.map.Map.internal_static_ref_parse_MapMessageType_Int64ValueEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.INT64,
                0L,
                com.google.protobuf.WireFormat.FieldType.INT64,
                0L);
  }
  private com.google.protobuf.MapField<
      java.lang.Long, java.lang.Long> int64Value_;
  private com.google.protobuf.MapField<java.lang.Long, java.lang.Long>
  internalGetInt64Value() {
    if (int64Value_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          Int64ValueDefaultEntryHolder.defaultEntry);
    }
    return int64Value_;
  }

  public int getInt64ValueCount() {
    return internalGetInt64Value().getMap().size();
  }
  /**
   * <code>map&lt;int64, int64&gt; int64Value = 7;</code>
   */

  @java.lang.Override
  public boolean containsInt64Value(
      long key) {
    
    return internalGetInt64Value().getMap().containsKey(key);
  }
  /**
   * Use {@link #getInt64ValueMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.Long, java.lang.Long> getInt64Value() {
    return getInt64ValueMap();
  }
  /**
   * <code>map&lt;int64, int64&gt; int64Value = 7;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.Long, java.lang.Long> getInt64ValueMap() {
    return internalGetInt64Value().getMap();
  }
  /**
   * <code>map&lt;int64, int64&gt; int64Value = 7;</code>
   */
  @java.lang.Override

  public long getInt64ValueOrDefault(
      long key,
      long defaultValue) {
    
    java.util.Map<java.lang.Long, java.lang.Long> map =
        internalGetInt64Value().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;int64, int64&gt; int64Value = 7;</code>
   */
  @java.lang.Override

  public long getInt64ValueOrThrow(
      long key) {
    
    java.util.Map<java.lang.Long, java.lang.Long> map =
        internalGetInt64Value().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int FIXED64VALUE_FIELD_NUMBER = 8;
  private static final class Fixed64ValueDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.Long, java.lang.Long> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.Long, java.lang.Long>newDefaultInstance(
                com.examples.protobuf.map.Map.internal_static_ref_parse_MapMessageType_Fixed64ValueEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.FIXED64,
                0L,
                com.google.protobuf.WireFormat.FieldType.FIXED64,
                0L);
  }
  private com.google.protobuf.MapField<
      java.lang.Long, java.lang.Long> fixed64Value_;
  private com.google.protobuf.MapField<java.lang.Long, java.lang.Long>
  internalGetFixed64Value() {
    if (fixed64Value_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          Fixed64ValueDefaultEntryHolder.defaultEntry);
    }
    return fixed64Value_;
  }

  public int getFixed64ValueCount() {
    return internalGetFixed64Value().getMap().size();
  }
  /**
   * <code>map&lt;fixed64, fixed64&gt; fixed64Value = 8;</code>
   */

  @java.lang.Override
  public boolean containsFixed64Value(
      long key) {
    
    return internalGetFixed64Value().getMap().containsKey(key);
  }
  /**
   * Use {@link #getFixed64ValueMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.Long, java.lang.Long> getFixed64Value() {
    return getFixed64ValueMap();
  }
  /**
   * <code>map&lt;fixed64, fixed64&gt; fixed64Value = 8;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.Long, java.lang.Long> getFixed64ValueMap() {
    return internalGetFixed64Value().getMap();
  }
  /**
   * <code>map&lt;fixed64, fixed64&gt; fixed64Value = 8;</code>
   */
  @java.lang.Override

  public long getFixed64ValueOrDefault(
      long key,
      long defaultValue) {
    
    java.util.Map<java.lang.Long, java.lang.Long> map =
        internalGetFixed64Value().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;fixed64, fixed64&gt; fixed64Value = 8;</code>
   */
  @java.lang.Override

  public long getFixed64ValueOrThrow(
      long key) {
    
    java.util.Map<java.lang.Long, java.lang.Long> map =
        internalGetFixed64Value().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int UINT64VALUE_FIELD_NUMBER = 9;
  private static final class Uint64ValueDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.Long, java.lang.Long> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.Long, java.lang.Long>newDefaultInstance(
                com.examples.protobuf.map.Map.internal_static_ref_parse_MapMessageType_Uint64ValueEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.UINT64,
                0L,
                com.google.protobuf.WireFormat.FieldType.UINT64,
                0L);
  }
  private com.google.protobuf.MapField<
      java.lang.Long, java.lang.Long> uint64Value_;
  private com.google.protobuf.MapField<java.lang.Long, java.lang.Long>
  internalGetUint64Value() {
    if (uint64Value_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          Uint64ValueDefaultEntryHolder.defaultEntry);
    }
    return uint64Value_;
  }

  public int getUint64ValueCount() {
    return internalGetUint64Value().getMap().size();
  }
  /**
   * <code>map&lt;uint64, uint64&gt; uint64Value = 9;</code>
   */

  @java.lang.Override
  public boolean containsUint64Value(
      long key) {
    
    return internalGetUint64Value().getMap().containsKey(key);
  }
  /**
   * Use {@link #getUint64ValueMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.Long, java.lang.Long> getUint64Value() {
    return getUint64ValueMap();
  }
  /**
   * <code>map&lt;uint64, uint64&gt; uint64Value = 9;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.Long, java.lang.Long> getUint64ValueMap() {
    return internalGetUint64Value().getMap();
  }
  /**
   * <code>map&lt;uint64, uint64&gt; uint64Value = 9;</code>
   */
  @java.lang.Override

  public long getUint64ValueOrDefault(
      long key,
      long defaultValue) {
    
    java.util.Map<java.lang.Long, java.lang.Long> map =
        internalGetUint64Value().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;uint64, uint64&gt; uint64Value = 9;</code>
   */
  @java.lang.Override

  public long getUint64ValueOrThrow(
      long key) {
    
    java.util.Map<java.lang.Long, java.lang.Long> map =
        internalGetUint64Value().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int FLOATVALUE_FIELD_NUMBER = 10;
  private static final class FloatValueDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.Float> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.Float>newDefaultInstance(
                com.examples.protobuf.map.Map.internal_static_ref_parse_MapMessageType_FloatValueEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.FLOAT,
                0F);
  }
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.Float> floatValue_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.Float>
  internalGetFloatValue() {
    if (floatValue_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          FloatValueDefaultEntryHolder.defaultEntry);
    }
    return floatValue_;
  }

  public int getFloatValueCount() {
    return internalGetFloatValue().getMap().size();
  }
  /**
   * <code>map&lt;string, float&gt; floatValue = 10;</code>
   */

  @java.lang.Override
  public boolean containsFloatValue(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetFloatValue().getMap().containsKey(key);
  }
  /**
   * Use {@link #getFloatValueMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.Float> getFloatValue() {
    return getFloatValueMap();
  }
  /**
   * <code>map&lt;string, float&gt; floatValue = 10;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, java.lang.Float> getFloatValueMap() {
    return internalGetFloatValue().getMap();
  }
  /**
   * <code>map&lt;string, float&gt; floatValue = 10;</code>
   */
  @java.lang.Override

  public float getFloatValueOrDefault(
      java.lang.String key,
      float defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.Float> map =
        internalGetFloatValue().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, float&gt; floatValue = 10;</code>
   */
  @java.lang.Override

  public float getFloatValueOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.Float> map =
        internalGetFloatValue().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int DOUBLEVALUE_FIELD_NUMBER = 11;
  private static final class DoubleValueDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.Double> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.Double>newDefaultInstance(
                com.examples.protobuf.map.Map.internal_static_ref_parse_MapMessageType_DoubleValueEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.DOUBLE,
                0D);
  }
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.Double> doubleValue_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.Double>
  internalGetDoubleValue() {
    if (doubleValue_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          DoubleValueDefaultEntryHolder.defaultEntry);
    }
    return doubleValue_;
  }

  public int getDoubleValueCount() {
    return internalGetDoubleValue().getMap().size();
  }
  /**
   * <code>map&lt;string, double&gt; doubleValue = 11;</code>
   */

  @java.lang.Override
  public boolean containsDoubleValue(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetDoubleValue().getMap().containsKey(key);
  }
  /**
   * Use {@link #getDoubleValueMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.Double> getDoubleValue() {
    return getDoubleValueMap();
  }
  /**
   * <code>map&lt;string, double&gt; doubleValue = 11;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, java.lang.Double> getDoubleValueMap() {
    return internalGetDoubleValue().getMap();
  }
  /**
   * <code>map&lt;string, double&gt; doubleValue = 11;</code>
   */
  @java.lang.Override

  public double getDoubleValueOrDefault(
      java.lang.String key,
      double defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.Double> map =
        internalGetDoubleValue().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, double&gt; doubleValue = 11;</code>
   */
  @java.lang.Override

  public double getDoubleValueOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.Double> map =
        internalGetDoubleValue().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int ENUMVALUE_FIELD_NUMBER = 12;
  private static final class EnumValueDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.Integer> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.Integer>newDefaultInstance(
                com.examples.protobuf.map.Map.internal_static_ref_parse_MapMessageType_EnumValueEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.ENUM,
                com.examples.protobuf.map.EnumType.A.getNumber());
  }
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.Integer> enumValue_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
  internalGetEnumValue() {
    if (enumValue_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          EnumValueDefaultEntryHolder.defaultEntry);
    }
    return enumValue_;
  }
  private static final
  com.google.protobuf.Internal.MapAdapter.Converter<
      java.lang.Integer, com.examples.protobuf.map.EnumType> enumValueValueConverter =
          com.google.protobuf.Internal.MapAdapter.newEnumConverter(
              com.examples.protobuf.map.EnumType.internalGetValueMap(),
              com.examples.protobuf.map.EnumType.UNRECOGNIZED);
  private static final java.util.Map<java.lang.String, com.examples.protobuf.map.EnumType>
  internalGetAdaptedEnumValueMap(
      java.util.Map<java.lang.String, java.lang.Integer> map) {
    return new com.google.protobuf.Internal.MapAdapter<
        java.lang.String, com.examples.protobuf.map.EnumType, java.lang.Integer>(
            map, enumValueValueConverter);
  }

  public int getEnumValueCount() {
    return internalGetEnumValue().getMap().size();
  }
  /**
   * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
   */

  @java.lang.Override
  public boolean containsEnumValue(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetEnumValue().getMap().containsKey(key);
  }
  /**
   * Use {@link #getEnumValueMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.examples.protobuf.map.EnumType>
  getEnumValue() {
    return getEnumValueMap();
  }
  /**
   * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, com.examples.protobuf.map.EnumType>
  getEnumValueMap() {
    return internalGetAdaptedEnumValueMap(
        internalGetEnumValue().getMap());}
  /**
   * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
   */
  @java.lang.Override

  public com.examples.protobuf.map.EnumType getEnumValueOrDefault(
      java.lang.String key,
      com.examples.protobuf.map.EnumType defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetEnumValue().getMap();
    return map.containsKey(key)
           ? enumValueValueConverter.doForward(map.get(key))
           : defaultValue;
  }
  /**
   * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
   */
  @java.lang.Override

  public com.examples.protobuf.map.EnumType getEnumValueOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetEnumValue().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return enumValueValueConverter.doForward(map.get(key));
  }
  /**
   * Use {@link #getEnumValueValueMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.Integer>
  getEnumValueValue() {
    return getEnumValueValueMap();
  }
  /**
   * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, java.lang.Integer>
  getEnumValueValueMap() {
    return internalGetEnumValue().getMap();
  }
  /**
   * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
   */
  @java.lang.Override

  public int getEnumValueValueOrDefault(
      java.lang.String key,
      int defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetEnumValue().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
   */
  @java.lang.Override

  public int getEnumValueValueOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetEnumValue().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int REFERENCEVALUE_FIELD_NUMBER = 13;
  private static final class ReferenceValueDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.examples.protobuf.map.ReferenceMessageType> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.examples.protobuf.map.ReferenceMessageType>newDefaultInstance(
                com.examples.protobuf.map.Map.internal_static_ref_parse_MapMessageType_ReferenceValueEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.examples.protobuf.map.ReferenceMessageType.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, com.examples.protobuf.map.ReferenceMessageType> referenceValue_;
  private com.google.protobuf.MapField<java.lang.String, com.examples.protobuf.map.ReferenceMessageType>
  internalGetReferenceValue() {
    if (referenceValue_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          ReferenceValueDefaultEntryHolder.defaultEntry);
    }
    return referenceValue_;
  }

  public int getReferenceValueCount() {
    return internalGetReferenceValue().getMap().size();
  }
  /**
   * <code>map&lt;string, .ref.parse.ReferenceMessageType&gt; referenceValue = 13;</code>
   */

  @java.lang.Override
  public boolean containsReferenceValue(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetReferenceValue().getMap().containsKey(key);
  }
  /**
   * Use {@link #getReferenceValueMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.examples.protobuf.map.ReferenceMessageType> getReferenceValue() {
    return getReferenceValueMap();
  }
  /**
   * <code>map&lt;string, .ref.parse.ReferenceMessageType&gt; referenceValue = 13;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, com.examples.protobuf.map.ReferenceMessageType> getReferenceValueMap() {
    return internalGetReferenceValue().getMap();
  }
  /**
   * <code>map&lt;string, .ref.parse.ReferenceMessageType&gt; referenceValue = 13;</code>
   */
  @java.lang.Override

  public com.examples.protobuf.map.ReferenceMessageType getReferenceValueOrDefault(
      java.lang.String key,
      com.examples.protobuf.map.ReferenceMessageType defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, com.examples.protobuf.map.ReferenceMessageType> map =
        internalGetReferenceValue().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, .ref.parse.ReferenceMessageType&gt; referenceValue = 13;</code>
   */
  @java.lang.Override

  public com.examples.protobuf.map.ReferenceMessageType getReferenceValueOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, com.examples.protobuf.map.ReferenceMessageType> map =
        internalGetReferenceValue().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    com.google.protobuf.GeneratedMessageV3
      .serializeBooleanMapTo(
        output,
        internalGetBoolValue(),
        BoolValueDefaultEntryHolder.defaultEntry,
        1);
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetStringValue(),
        StringValueDefaultEntryHolder.defaultEntry,
        2);
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetBytesValue(),
        BytesValueDefaultEntryHolder.defaultEntry,
        3);
    com.google.protobuf.GeneratedMessageV3
      .serializeIntegerMapTo(
        output,
        internalGetInt32Value(),
        Int32ValueDefaultEntryHolder.defaultEntry,
        4);
    com.google.protobuf.GeneratedMessageV3
      .serializeIntegerMapTo(
        output,
        internalGetFixed32Value(),
        Fixed32ValueDefaultEntryHolder.defaultEntry,
        5);
    com.google.protobuf.GeneratedMessageV3
      .serializeIntegerMapTo(
        output,
        internalGetUint32Value(),
        Uint32ValueDefaultEntryHolder.defaultEntry,
        6);
    com.google.protobuf.GeneratedMessageV3
      .serializeLongMapTo(
        output,
        internalGetInt64Value(),
        Int64ValueDefaultEntryHolder.defaultEntry,
        7);
    com.google.protobuf.GeneratedMessageV3
      .serializeLongMapTo(
        output,
        internalGetFixed64Value(),
        Fixed64ValueDefaultEntryHolder.defaultEntry,
        8);
    com.google.protobuf.GeneratedMessageV3
      .serializeLongMapTo(
        output,
        internalGetUint64Value(),
        Uint64ValueDefaultEntryHolder.defaultEntry,
        9);
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetFloatValue(),
        FloatValueDefaultEntryHolder.defaultEntry,
        10);
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetDoubleValue(),
        DoubleValueDefaultEntryHolder.defaultEntry,
        11);
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetEnumValue(),
        EnumValueDefaultEntryHolder.defaultEntry,
        12);
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetReferenceValue(),
        ReferenceValueDefaultEntryHolder.defaultEntry,
        13);
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (java.util.Map.Entry<java.lang.Boolean, java.lang.Boolean> entry
         : internalGetBoolValue().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.Boolean, java.lang.Boolean>
      boolValue__ = BoolValueDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, boolValue__);
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetStringValue().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
      stringValue__ = StringValueDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, stringValue__);
    }
    for (java.util.Map.Entry<java.lang.String, com.google.protobuf.ByteString> entry
         : internalGetBytesValue().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.google.protobuf.ByteString>
      bytesValue__ = BytesValueDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, bytesValue__);
    }
    for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> entry
         : internalGetInt32Value().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.Integer, java.lang.Integer>
      int32Value__ = Int32ValueDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, int32Value__);
    }
    for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> entry
         : internalGetFixed32Value().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.Integer, java.lang.Integer>
      fixed32Value__ = Fixed32ValueDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, fixed32Value__);
    }
    for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> entry
         : internalGetUint32Value().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.Integer, java.lang.Integer>
      uint32Value__ = Uint32ValueDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, uint32Value__);
    }
    for (java.util.Map.Entry<java.lang.Long, java.lang.Long> entry
         : internalGetInt64Value().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.Long, java.lang.Long>
      int64Value__ = Int64ValueDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, int64Value__);
    }
    for (java.util.Map.Entry<java.lang.Long, java.lang.Long> entry
         : internalGetFixed64Value().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.Long, java.lang.Long>
      fixed64Value__ = Fixed64ValueDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, fixed64Value__);
    }
    for (java.util.Map.Entry<java.lang.Long, java.lang.Long> entry
         : internalGetUint64Value().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.Long, java.lang.Long>
      uint64Value__ = Uint64ValueDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, uint64Value__);
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.Float> entry
         : internalGetFloatValue().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.Float>
      floatValue__ = FloatValueDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, floatValue__);
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.Double> entry
         : internalGetDoubleValue().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.Double>
      doubleValue__ = DoubleValueDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, doubleValue__);
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry
         : internalGetEnumValue().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
      enumValue__ = EnumValueDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, enumValue__);
    }
    for (java.util.Map.Entry<java.lang.String, com.examples.protobuf.map.ReferenceMessageType> entry
         : internalGetReferenceValue().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.examples.protobuf.map.ReferenceMessageType>
      referenceValue__ = ReferenceValueDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, referenceValue__);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.examples.protobuf.map.MapMessageType)) {
      return super.equals(obj);
    }
    com.examples.protobuf.map.MapMessageType other = (com.examples.protobuf.map.MapMessageType) obj;

    if (!internalGetBoolValue().equals(
        other.internalGetBoolValue())) return false;
    if (!internalGetStringValue().equals(
        other.internalGetStringValue())) return false;
    if (!internalGetBytesValue().equals(
        other.internalGetBytesValue())) return false;
    if (!internalGetInt32Value().equals(
        other.internalGetInt32Value())) return false;
    if (!internalGetFixed32Value().equals(
        other.internalGetFixed32Value())) return false;
    if (!internalGetUint32Value().equals(
        other.internalGetUint32Value())) return false;
    if (!internalGetInt64Value().equals(
        other.internalGetInt64Value())) return false;
    if (!internalGetFixed64Value().equals(
        other.internalGetFixed64Value())) return false;
    if (!internalGetUint64Value().equals(
        other.internalGetUint64Value())) return false;
    if (!internalGetFloatValue().equals(
        other.internalGetFloatValue())) return false;
    if (!internalGetDoubleValue().equals(
        other.internalGetDoubleValue())) return false;
    if (!internalGetEnumValue().equals(
        other.internalGetEnumValue())) return false;
    if (!internalGetReferenceValue().equals(
        other.internalGetReferenceValue())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (!internalGetBoolValue().getMap().isEmpty()) {
      hash = (37 * hash) + BOOLVALUE_FIELD_NUMBER;
      hash = (53 * hash) + internalGetBoolValue().hashCode();
    }
    if (!internalGetStringValue().getMap().isEmpty()) {
      hash = (37 * hash) + STRINGVALUE_FIELD_NUMBER;
      hash = (53 * hash) + internalGetStringValue().hashCode();
    }
    if (!internalGetBytesValue().getMap().isEmpty()) {
      hash = (37 * hash) + BYTESVALUE_FIELD_NUMBER;
      hash = (53 * hash) + internalGetBytesValue().hashCode();
    }
    if (!internalGetInt32Value().getMap().isEmpty()) {
      hash = (37 * hash) + INT32VALUE_FIELD_NUMBER;
      hash = (53 * hash) + internalGetInt32Value().hashCode();
    }
    if (!internalGetFixed32Value().getMap().isEmpty()) {
      hash = (37 * hash) + FIXED32VALUE_FIELD_NUMBER;
      hash = (53 * hash) + internalGetFixed32Value().hashCode();
    }
    if (!internalGetUint32Value().getMap().isEmpty()) {
      hash = (37 * hash) + UINT32VALUE_FIELD_NUMBER;
      hash = (53 * hash) + internalGetUint32Value().hashCode();
    }
    if (!internalGetInt64Value().getMap().isEmpty()) {
      hash = (37 * hash) + INT64VALUE_FIELD_NUMBER;
      hash = (53 * hash) + internalGetInt64Value().hashCode();
    }
    if (!internalGetFixed64Value().getMap().isEmpty()) {
      hash = (37 * hash) + FIXED64VALUE_FIELD_NUMBER;
      hash = (53 * hash) + internalGetFixed64Value().hashCode();
    }
    if (!internalGetUint64Value().getMap().isEmpty()) {
      hash = (37 * hash) + UINT64VALUE_FIELD_NUMBER;
      hash = (53 * hash) + internalGetUint64Value().hashCode();
    }
    if (!internalGetFloatValue().getMap().isEmpty()) {
      hash = (37 * hash) + FLOATVALUE_FIELD_NUMBER;
      hash = (53 * hash) + internalGetFloatValue().hashCode();
    }
    if (!internalGetDoubleValue().getMap().isEmpty()) {
      hash = (37 * hash) + DOUBLEVALUE_FIELD_NUMBER;
      hash = (53 * hash) + internalGetDoubleValue().hashCode();
    }
    if (!internalGetEnumValue().getMap().isEmpty()) {
      hash = (37 * hash) + ENUMVALUE_FIELD_NUMBER;
      hash = (53 * hash) + internalGetEnumValue().hashCode();
    }
    if (!internalGetReferenceValue().getMap().isEmpty()) {
      hash = (37 * hash) + REFERENCEVALUE_FIELD_NUMBER;
      hash = (53 * hash) + internalGetReferenceValue().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.examples.protobuf.map.MapMessageType parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.examples.protobuf.map.MapMessageType parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.examples.protobuf.map.MapMessageType parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.examples.protobuf.map.MapMessageType parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.examples.protobuf.map.MapMessageType parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.examples.protobuf.map.MapMessageType parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.examples.protobuf.map.MapMessageType parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.examples.protobuf.map.MapMessageType parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.examples.protobuf.map.MapMessageType parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.examples.protobuf.map.MapMessageType parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.examples.protobuf.map.MapMessageType parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.examples.protobuf.map.MapMessageType parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.examples.protobuf.map.MapMessageType prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code ref.parse.MapMessageType}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:ref.parse.MapMessageType)
      com.examples.protobuf.map.MapMessageTypeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.examples.protobuf.map.Map.internal_static_ref_parse_MapMessageType_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetBoolValue();
        case 2:
          return internalGetStringValue();
        case 3:
          return internalGetBytesValue();
        case 4:
          return internalGetInt32Value();
        case 5:
          return internalGetFixed32Value();
        case 6:
          return internalGetUint32Value();
        case 7:
          return internalGetInt64Value();
        case 8:
          return internalGetFixed64Value();
        case 9:
          return internalGetUint64Value();
        case 10:
          return internalGetFloatValue();
        case 11:
          return internalGetDoubleValue();
        case 12:
          return internalGetEnumValue();
        case 13:
          return internalGetReferenceValue();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetMutableBoolValue();
        case 2:
          return internalGetMutableStringValue();
        case 3:
          return internalGetMutableBytesValue();
        case 4:
          return internalGetMutableInt32Value();
        case 5:
          return internalGetMutableFixed32Value();
        case 6:
          return internalGetMutableUint32Value();
        case 7:
          return internalGetMutableInt64Value();
        case 8:
          return internalGetMutableFixed64Value();
        case 9:
          return internalGetMutableUint64Value();
        case 10:
          return internalGetMutableFloatValue();
        case 11:
          return internalGetMutableDoubleValue();
        case 12:
          return internalGetMutableEnumValue();
        case 13:
          return internalGetMutableReferenceValue();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.examples.protobuf.map.Map.internal_static_ref_parse_MapMessageType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.examples.protobuf.map.MapMessageType.class, com.examples.protobuf.map.MapMessageType.Builder.class);
    }

    // Construct using com.examples.protobuf.map.MapMessageType.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      internalGetMutableBoolValue().clear();
      internalGetMutableStringValue().clear();
      internalGetMutableBytesValue().clear();
      internalGetMutableInt32Value().clear();
      internalGetMutableFixed32Value().clear();
      internalGetMutableUint32Value().clear();
      internalGetMutableInt64Value().clear();
      internalGetMutableFixed64Value().clear();
      internalGetMutableUint64Value().clear();
      internalGetMutableFloatValue().clear();
      internalGetMutableDoubleValue().clear();
      internalGetMutableEnumValue().clear();
      internalGetMutableReferenceValue().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.examples.protobuf.map.Map.internal_static_ref_parse_MapMessageType_descriptor;
    }

    @java.lang.Override
    public com.examples.protobuf.map.MapMessageType getDefaultInstanceForType() {
      return com.examples.protobuf.map.MapMessageType.getDefaultInstance();
    }

    @java.lang.Override
    public com.examples.protobuf.map.MapMessageType build() {
      com.examples.protobuf.map.MapMessageType result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.examples.protobuf.map.MapMessageType buildPartial() {
      com.examples.protobuf.map.MapMessageType result = new com.examples.protobuf.map.MapMessageType(this);
      int from_bitField0_ = bitField0_;
      result.boolValue_ = internalGetBoolValue();
      result.boolValue_.makeImmutable();
      result.stringValue_ = internalGetStringValue();
      result.stringValue_.makeImmutable();
      result.bytesValue_ = internalGetBytesValue();
      result.bytesValue_.makeImmutable();
      result.int32Value_ = internalGetInt32Value();
      result.int32Value_.makeImmutable();
      result.fixed32Value_ = internalGetFixed32Value();
      result.fixed32Value_.makeImmutable();
      result.uint32Value_ = internalGetUint32Value();
      result.uint32Value_.makeImmutable();
      result.int64Value_ = internalGetInt64Value();
      result.int64Value_.makeImmutable();
      result.fixed64Value_ = internalGetFixed64Value();
      result.fixed64Value_.makeImmutable();
      result.uint64Value_ = internalGetUint64Value();
      result.uint64Value_.makeImmutable();
      result.floatValue_ = internalGetFloatValue();
      result.floatValue_.makeImmutable();
      result.doubleValue_ = internalGetDoubleValue();
      result.doubleValue_.makeImmutable();
      result.enumValue_ = internalGetEnumValue();
      result.enumValue_.makeImmutable();
      result.referenceValue_ = internalGetReferenceValue();
      result.referenceValue_.makeImmutable();
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.examples.protobuf.map.MapMessageType) {
        return mergeFrom((com.examples.protobuf.map.MapMessageType)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.examples.protobuf.map.MapMessageType other) {
      if (other == com.examples.protobuf.map.MapMessageType.getDefaultInstance()) return this;
      internalGetMutableBoolValue().mergeFrom(
          other.internalGetBoolValue());
      internalGetMutableStringValue().mergeFrom(
          other.internalGetStringValue());
      internalGetMutableBytesValue().mergeFrom(
          other.internalGetBytesValue());
      internalGetMutableInt32Value().mergeFrom(
          other.internalGetInt32Value());
      internalGetMutableFixed32Value().mergeFrom(
          other.internalGetFixed32Value());
      internalGetMutableUint32Value().mergeFrom(
          other.internalGetUint32Value());
      internalGetMutableInt64Value().mergeFrom(
          other.internalGetInt64Value());
      internalGetMutableFixed64Value().mergeFrom(
          other.internalGetFixed64Value());
      internalGetMutableUint64Value().mergeFrom(
          other.internalGetUint64Value());
      internalGetMutableFloatValue().mergeFrom(
          other.internalGetFloatValue());
      internalGetMutableDoubleValue().mergeFrom(
          other.internalGetDoubleValue());
      internalGetMutableEnumValue().mergeFrom(
          other.internalGetEnumValue());
      internalGetMutableReferenceValue().mergeFrom(
          other.internalGetReferenceValue());
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.examples.protobuf.map.MapMessageType parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.examples.protobuf.map.MapMessageType) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.MapField<
        java.lang.Boolean, java.lang.Boolean> boolValue_;
    private com.google.protobuf.MapField<java.lang.Boolean, java.lang.Boolean>
    internalGetBoolValue() {
      if (boolValue_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            BoolValueDefaultEntryHolder.defaultEntry);
      }
      return boolValue_;
    }
    private com.google.protobuf.MapField<java.lang.Boolean, java.lang.Boolean>
    internalGetMutableBoolValue() {
      onChanged();;
      if (boolValue_ == null) {
        boolValue_ = com.google.protobuf.MapField.newMapField(
            BoolValueDefaultEntryHolder.defaultEntry);
      }
      if (!boolValue_.isMutable()) {
        boolValue_ = boolValue_.copy();
      }
      return boolValue_;
    }

    public int getBoolValueCount() {
      return internalGetBoolValue().getMap().size();
    }
    /**
     * <code>map&lt;bool, bool&gt; boolValue = 1;</code>
     */

    @java.lang.Override
    public boolean containsBoolValue(
        boolean key) {
      
      return internalGetBoolValue().getMap().containsKey(key);
    }
    /**
     * Use {@link #getBoolValueMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, java.lang.Boolean> getBoolValue() {
      return getBoolValueMap();
    }
    /**
     * <code>map&lt;bool, bool&gt; boolValue = 1;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Boolean, java.lang.Boolean> getBoolValueMap() {
      return internalGetBoolValue().getMap();
    }
    /**
     * <code>map&lt;bool, bool&gt; boolValue = 1;</code>
     */
    @java.lang.Override

    public boolean getBoolValueOrDefault(
        boolean key,
        boolean defaultValue) {
      
      java.util.Map<java.lang.Boolean, java.lang.Boolean> map =
          internalGetBoolValue().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;bool, bool&gt; boolValue = 1;</code>
     */
    @java.lang.Override

    public boolean getBoolValueOrThrow(
        boolean key) {
      
      java.util.Map<java.lang.Boolean, java.lang.Boolean> map =
          internalGetBoolValue().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearBoolValue() {
      internalGetMutableBoolValue().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;bool, bool&gt; boolValue = 1;</code>
     */

    public Builder removeBoolValue(
        boolean key) {
      
      internalGetMutableBoolValue().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Boolean, java.lang.Boolean>
    getMutableBoolValue() {
      return internalGetMutableBoolValue().getMutableMap();
    }
    /**
     * <code>map&lt;bool, bool&gt; boolValue = 1;</code>
     */
    public Builder putBoolValue(
        boolean key,
        boolean value) {
      
      
      internalGetMutableBoolValue().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <code>map&lt;bool, bool&gt; boolValue = 1;</code>
     */

    public Builder putAllBoolValue(
        java.util.Map<java.lang.Boolean, java.lang.Boolean> values) {
      internalGetMutableBoolValue().getMutableMap()
          .putAll(values);
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> stringValue_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetStringValue() {
      if (stringValue_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            StringValueDefaultEntryHolder.defaultEntry);
      }
      return stringValue_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetMutableStringValue() {
      onChanged();;
      if (stringValue_ == null) {
        stringValue_ = com.google.protobuf.MapField.newMapField(
            StringValueDefaultEntryHolder.defaultEntry);
      }
      if (!stringValue_.isMutable()) {
        stringValue_ = stringValue_.copy();
      }
      return stringValue_;
    }

    public int getStringValueCount() {
      return internalGetStringValue().getMap().size();
    }
    /**
     * <code>map&lt;string, string&gt; stringValue = 2;</code>
     */

    @java.lang.Override
    public boolean containsStringValue(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetStringValue().getMap().containsKey(key);
    }
    /**
     * Use {@link #getStringValueMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getStringValue() {
      return getStringValueMap();
    }
    /**
     * <code>map&lt;string, string&gt; stringValue = 2;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getStringValueMap() {
      return internalGetStringValue().getMap();
    }
    /**
     * <code>map&lt;string, string&gt; stringValue = 2;</code>
     */
    @java.lang.Override

    public java.lang.String getStringValueOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetStringValue().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; stringValue = 2;</code>
     */
    @java.lang.Override

    public java.lang.String getStringValueOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetStringValue().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearStringValue() {
      internalGetMutableStringValue().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;string, string&gt; stringValue = 2;</code>
     */

    public Builder removeStringValue(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableStringValue().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String>
    getMutableStringValue() {
      return internalGetMutableStringValue().getMutableMap();
    }
    /**
     * <code>map&lt;string, string&gt; stringValue = 2;</code>
     */
    public Builder putStringValue(
        java.lang.String key,
        java.lang.String value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      if (value == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableStringValue().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <code>map&lt;string, string&gt; stringValue = 2;</code>
     */

    public Builder putAllStringValue(
        java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableStringValue().getMutableMap()
          .putAll(values);
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.google.protobuf.ByteString> bytesValue_;
    private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.ByteString>
    internalGetBytesValue() {
      if (bytesValue_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            BytesValueDefaultEntryHolder.defaultEntry);
      }
      return bytesValue_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.ByteString>
    internalGetMutableBytesValue() {
      onChanged();;
      if (bytesValue_ == null) {
        bytesValue_ = com.google.protobuf.MapField.newMapField(
            BytesValueDefaultEntryHolder.defaultEntry);
      }
      if (!bytesValue_.isMutable()) {
        bytesValue_ = bytesValue_.copy();
      }
      return bytesValue_;
    }

    public int getBytesValueCount() {
      return internalGetBytesValue().getMap().size();
    }
    /**
     * <code>map&lt;string, bytes&gt; bytesValue = 3;</code>
     */

    @java.lang.Override
    public boolean containsBytesValue(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetBytesValue().getMap().containsKey(key);
    }
    /**
     * Use {@link #getBytesValueMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getBytesValue() {
      return getBytesValueMap();
    }
    /**
     * <code>map&lt;string, bytes&gt; bytesValue = 3;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getBytesValueMap() {
      return internalGetBytesValue().getMap();
    }
    /**
     * <code>map&lt;string, bytes&gt; bytesValue = 3;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getBytesValueOrDefault(
        java.lang.String key,
        com.google.protobuf.ByteString defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
          internalGetBytesValue().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, bytes&gt; bytesValue = 3;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getBytesValueOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
          internalGetBytesValue().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearBytesValue() {
      internalGetMutableBytesValue().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;string, bytes&gt; bytesValue = 3;</code>
     */

    public Builder removeBytesValue(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableBytesValue().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getMutableBytesValue() {
      return internalGetMutableBytesValue().getMutableMap();
    }
    /**
     * <code>map&lt;string, bytes&gt; bytesValue = 3;</code>
     */
    public Builder putBytesValue(
        java.lang.String key,
        com.google.protobuf.ByteString value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      if (value == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableBytesValue().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <code>map&lt;string, bytes&gt; bytesValue = 3;</code>
     */

    public Builder putAllBytesValue(
        java.util.Map<java.lang.String, com.google.protobuf.ByteString> values) {
      internalGetMutableBytesValue().getMutableMap()
          .putAll(values);
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.Integer, java.lang.Integer> int32Value_;
    private com.google.protobuf.MapField<java.lang.Integer, java.lang.Integer>
    internalGetInt32Value() {
      if (int32Value_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            Int32ValueDefaultEntryHolder.defaultEntry);
      }
      return int32Value_;
    }
    private com.google.protobuf.MapField<java.lang.Integer, java.lang.Integer>
    internalGetMutableInt32Value() {
      onChanged();;
      if (int32Value_ == null) {
        int32Value_ = com.google.protobuf.MapField.newMapField(
            Int32ValueDefaultEntryHolder.defaultEntry);
      }
      if (!int32Value_.isMutable()) {
        int32Value_ = int32Value_.copy();
      }
      return int32Value_;
    }

    public int getInt32ValueCount() {
      return internalGetInt32Value().getMap().size();
    }
    /**
     * <code>map&lt;int32, int32&gt; int32Value = 4;</code>
     */

    @java.lang.Override
    public boolean containsInt32Value(
        int key) {
      
      return internalGetInt32Value().getMap().containsKey(key);
    }
    /**
     * Use {@link #getInt32ValueMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getInt32Value() {
      return getInt32ValueMap();
    }
    /**
     * <code>map&lt;int32, int32&gt; int32Value = 4;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getInt32ValueMap() {
      return internalGetInt32Value().getMap();
    }
    /**
     * <code>map&lt;int32, int32&gt; int32Value = 4;</code>
     */
    @java.lang.Override

    public int getInt32ValueOrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetInt32Value().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, int32&gt; int32Value = 4;</code>
     */
    @java.lang.Override

    public int getInt32ValueOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetInt32Value().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearInt32Value() {
      internalGetMutableInt32Value().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;int32, int32&gt; int32Value = 4;</code>
     */

    public Builder removeInt32Value(
        int key) {
      
      internalGetMutableInt32Value().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableInt32Value() {
      return internalGetMutableInt32Value().getMutableMap();
    }
    /**
     * <code>map&lt;int32, int32&gt; int32Value = 4;</code>
     */
    public Builder putInt32Value(
        int key,
        int value) {
      
      
      internalGetMutableInt32Value().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <code>map&lt;int32, int32&gt; int32Value = 4;</code>
     */

    public Builder putAllInt32Value(
        java.util.Map<java.lang.Integer, java.lang.Integer> values) {
      internalGetMutableInt32Value().getMutableMap()
          .putAll(values);
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.Integer, java.lang.Integer> fixed32Value_;
    private com.google.protobuf.MapField<java.lang.Integer, java.lang.Integer>
    internalGetFixed32Value() {
      if (fixed32Value_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            Fixed32ValueDefaultEntryHolder.defaultEntry);
      }
      return fixed32Value_;
    }
    private com.google.protobuf.MapField<java.lang.Integer, java.lang.Integer>
    internalGetMutableFixed32Value() {
      onChanged();;
      if (fixed32Value_ == null) {
        fixed32Value_ = com.google.protobuf.MapField.newMapField(
            Fixed32ValueDefaultEntryHolder.defaultEntry);
      }
      if (!fixed32Value_.isMutable()) {
        fixed32Value_ = fixed32Value_.copy();
      }
      return fixed32Value_;
    }

    public int getFixed32ValueCount() {
      return internalGetFixed32Value().getMap().size();
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; fixed32Value = 5;</code>
     */

    @java.lang.Override
    public boolean containsFixed32Value(
        int key) {
      
      return internalGetFixed32Value().getMap().containsKey(key);
    }
    /**
     * Use {@link #getFixed32ValueMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getFixed32Value() {
      return getFixed32ValueMap();
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; fixed32Value = 5;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getFixed32ValueMap() {
      return internalGetFixed32Value().getMap();
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; fixed32Value = 5;</code>
     */
    @java.lang.Override

    public int getFixed32ValueOrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFixed32Value().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; fixed32Value = 5;</code>
     */
    @java.lang.Override

    public int getFixed32ValueOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetFixed32Value().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearFixed32Value() {
      internalGetMutableFixed32Value().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; fixed32Value = 5;</code>
     */

    public Builder removeFixed32Value(
        int key) {
      
      internalGetMutableFixed32Value().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableFixed32Value() {
      return internalGetMutableFixed32Value().getMutableMap();
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; fixed32Value = 5;</code>
     */
    public Builder putFixed32Value(
        int key,
        int value) {
      
      
      internalGetMutableFixed32Value().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <code>map&lt;fixed32, fixed32&gt; fixed32Value = 5;</code>
     */

    public Builder putAllFixed32Value(
        java.util.Map<java.lang.Integer, java.lang.Integer> values) {
      internalGetMutableFixed32Value().getMutableMap()
          .putAll(values);
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.Integer, java.lang.Integer> uint32Value_;
    private com.google.protobuf.MapField<java.lang.Integer, java.lang.Integer>
    internalGetUint32Value() {
      if (uint32Value_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            Uint32ValueDefaultEntryHolder.defaultEntry);
      }
      return uint32Value_;
    }
    private com.google.protobuf.MapField<java.lang.Integer, java.lang.Integer>
    internalGetMutableUint32Value() {
      onChanged();;
      if (uint32Value_ == null) {
        uint32Value_ = com.google.protobuf.MapField.newMapField(
            Uint32ValueDefaultEntryHolder.defaultEntry);
      }
      if (!uint32Value_.isMutable()) {
        uint32Value_ = uint32Value_.copy();
      }
      return uint32Value_;
    }

    public int getUint32ValueCount() {
      return internalGetUint32Value().getMap().size();
    }
    /**
     * <code>map&lt;uint32, uint32&gt; uint32Value = 6;</code>
     */

    @java.lang.Override
    public boolean containsUint32Value(
        int key) {
      
      return internalGetUint32Value().getMap().containsKey(key);
    }
    /**
     * Use {@link #getUint32ValueMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getUint32Value() {
      return getUint32ValueMap();
    }
    /**
     * <code>map&lt;uint32, uint32&gt; uint32Value = 6;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, java.lang.Integer> getUint32ValueMap() {
      return internalGetUint32Value().getMap();
    }
    /**
     * <code>map&lt;uint32, uint32&gt; uint32Value = 6;</code>
     */
    @java.lang.Override

    public int getUint32ValueOrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetUint32Value().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, uint32&gt; uint32Value = 6;</code>
     */
    @java.lang.Override

    public int getUint32ValueOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetUint32Value().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearUint32Value() {
      internalGetMutableUint32Value().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;uint32, uint32&gt; uint32Value = 6;</code>
     */

    public Builder removeUint32Value(
        int key) {
      
      internalGetMutableUint32Value().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableUint32Value() {
      return internalGetMutableUint32Value().getMutableMap();
    }
    /**
     * <code>map&lt;uint32, uint32&gt; uint32Value = 6;</code>
     */
    public Builder putUint32Value(
        int key,
        int value) {
      
      
      internalGetMutableUint32Value().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <code>map&lt;uint32, uint32&gt; uint32Value = 6;</code>
     */

    public Builder putAllUint32Value(
        java.util.Map<java.lang.Integer, java.lang.Integer> values) {
      internalGetMutableUint32Value().getMutableMap()
          .putAll(values);
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.Long, java.lang.Long> int64Value_;
    private com.google.protobuf.MapField<java.lang.Long, java.lang.Long>
    internalGetInt64Value() {
      if (int64Value_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            Int64ValueDefaultEntryHolder.defaultEntry);
      }
      return int64Value_;
    }
    private com.google.protobuf.MapField<java.lang.Long, java.lang.Long>
    internalGetMutableInt64Value() {
      onChanged();;
      if (int64Value_ == null) {
        int64Value_ = com.google.protobuf.MapField.newMapField(
            Int64ValueDefaultEntryHolder.defaultEntry);
      }
      if (!int64Value_.isMutable()) {
        int64Value_ = int64Value_.copy();
      }
      return int64Value_;
    }

    public int getInt64ValueCount() {
      return internalGetInt64Value().getMap().size();
    }
    /**
     * <code>map&lt;int64, int64&gt; int64Value = 7;</code>
     */

    @java.lang.Override
    public boolean containsInt64Value(
        long key) {
      
      return internalGetInt64Value().getMap().containsKey(key);
    }
    /**
     * Use {@link #getInt64ValueMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getInt64Value() {
      return getInt64ValueMap();
    }
    /**
     * <code>map&lt;int64, int64&gt; int64Value = 7;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getInt64ValueMap() {
      return internalGetInt64Value().getMap();
    }
    /**
     * <code>map&lt;int64, int64&gt; int64Value = 7;</code>
     */
    @java.lang.Override

    public long getInt64ValueOrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetInt64Value().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, int64&gt; int64Value = 7;</code>
     */
    @java.lang.Override

    public long getInt64ValueOrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetInt64Value().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearInt64Value() {
      internalGetMutableInt64Value().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;int64, int64&gt; int64Value = 7;</code>
     */

    public Builder removeInt64Value(
        long key) {
      
      internalGetMutableInt64Value().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long>
    getMutableInt64Value() {
      return internalGetMutableInt64Value().getMutableMap();
    }
    /**
     * <code>map&lt;int64, int64&gt; int64Value = 7;</code>
     */
    public Builder putInt64Value(
        long key,
        long value) {
      
      
      internalGetMutableInt64Value().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <code>map&lt;int64, int64&gt; int64Value = 7;</code>
     */

    public Builder putAllInt64Value(
        java.util.Map<java.lang.Long, java.lang.Long> values) {
      internalGetMutableInt64Value().getMutableMap()
          .putAll(values);
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.Long, java.lang.Long> fixed64Value_;
    private com.google.protobuf.MapField<java.lang.Long, java.lang.Long>
    internalGetFixed64Value() {
      if (fixed64Value_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            Fixed64ValueDefaultEntryHolder.defaultEntry);
      }
      return fixed64Value_;
    }
    private com.google.protobuf.MapField<java.lang.Long, java.lang.Long>
    internalGetMutableFixed64Value() {
      onChanged();;
      if (fixed64Value_ == null) {
        fixed64Value_ = com.google.protobuf.MapField.newMapField(
            Fixed64ValueDefaultEntryHolder.defaultEntry);
      }
      if (!fixed64Value_.isMutable()) {
        fixed64Value_ = fixed64Value_.copy();
      }
      return fixed64Value_;
    }

    public int getFixed64ValueCount() {
      return internalGetFixed64Value().getMap().size();
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; fixed64Value = 8;</code>
     */

    @java.lang.Override
    public boolean containsFixed64Value(
        long key) {
      
      return internalGetFixed64Value().getMap().containsKey(key);
    }
    /**
     * Use {@link #getFixed64ValueMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getFixed64Value() {
      return getFixed64ValueMap();
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; fixed64Value = 8;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getFixed64ValueMap() {
      return internalGetFixed64Value().getMap();
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; fixed64Value = 8;</code>
     */
    @java.lang.Override

    public long getFixed64ValueOrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFixed64Value().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; fixed64Value = 8;</code>
     */
    @java.lang.Override

    public long getFixed64ValueOrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetFixed64Value().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearFixed64Value() {
      internalGetMutableFixed64Value().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; fixed64Value = 8;</code>
     */

    public Builder removeFixed64Value(
        long key) {
      
      internalGetMutableFixed64Value().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long>
    getMutableFixed64Value() {
      return internalGetMutableFixed64Value().getMutableMap();
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; fixed64Value = 8;</code>
     */
    public Builder putFixed64Value(
        long key,
        long value) {
      
      
      internalGetMutableFixed64Value().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <code>map&lt;fixed64, fixed64&gt; fixed64Value = 8;</code>
     */

    public Builder putAllFixed64Value(
        java.util.Map<java.lang.Long, java.lang.Long> values) {
      internalGetMutableFixed64Value().getMutableMap()
          .putAll(values);
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.Long, java.lang.Long> uint64Value_;
    private com.google.protobuf.MapField<java.lang.Long, java.lang.Long>
    internalGetUint64Value() {
      if (uint64Value_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            Uint64ValueDefaultEntryHolder.defaultEntry);
      }
      return uint64Value_;
    }
    private com.google.protobuf.MapField<java.lang.Long, java.lang.Long>
    internalGetMutableUint64Value() {
      onChanged();;
      if (uint64Value_ == null) {
        uint64Value_ = com.google.protobuf.MapField.newMapField(
            Uint64ValueDefaultEntryHolder.defaultEntry);
      }
      if (!uint64Value_.isMutable()) {
        uint64Value_ = uint64Value_.copy();
      }
      return uint64Value_;
    }

    public int getUint64ValueCount() {
      return internalGetUint64Value().getMap().size();
    }
    /**
     * <code>map&lt;uint64, uint64&gt; uint64Value = 9;</code>
     */

    @java.lang.Override
    public boolean containsUint64Value(
        long key) {
      
      return internalGetUint64Value().getMap().containsKey(key);
    }
    /**
     * Use {@link #getUint64ValueMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getUint64Value() {
      return getUint64ValueMap();
    }
    /**
     * <code>map&lt;uint64, uint64&gt; uint64Value = 9;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, java.lang.Long> getUint64ValueMap() {
      return internalGetUint64Value().getMap();
    }
    /**
     * <code>map&lt;uint64, uint64&gt; uint64Value = 9;</code>
     */
    @java.lang.Override

    public long getUint64ValueOrDefault(
        long key,
        long defaultValue) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetUint64Value().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint64, uint64&gt; uint64Value = 9;</code>
     */
    @java.lang.Override

    public long getUint64ValueOrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetUint64Value().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearUint64Value() {
      internalGetMutableUint64Value().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;uint64, uint64&gt; uint64Value = 9;</code>
     */

    public Builder removeUint64Value(
        long key) {
      
      internalGetMutableUint64Value().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long>
    getMutableUint64Value() {
      return internalGetMutableUint64Value().getMutableMap();
    }
    /**
     * <code>map&lt;uint64, uint64&gt; uint64Value = 9;</code>
     */
    public Builder putUint64Value(
        long key,
        long value) {
      
      
      internalGetMutableUint64Value().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <code>map&lt;uint64, uint64&gt; uint64Value = 9;</code>
     */

    public Builder putAllUint64Value(
        java.util.Map<java.lang.Long, java.lang.Long> values) {
      internalGetMutableUint64Value().getMutableMap()
          .putAll(values);
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Float> floatValue_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Float>
    internalGetFloatValue() {
      if (floatValue_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            FloatValueDefaultEntryHolder.defaultEntry);
      }
      return floatValue_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.Float>
    internalGetMutableFloatValue() {
      onChanged();;
      if (floatValue_ == null) {
        floatValue_ = com.google.protobuf.MapField.newMapField(
            FloatValueDefaultEntryHolder.defaultEntry);
      }
      if (!floatValue_.isMutable()) {
        floatValue_ = floatValue_.copy();
      }
      return floatValue_;
    }

    public int getFloatValueCount() {
      return internalGetFloatValue().getMap().size();
    }
    /**
     * <code>map&lt;string, float&gt; floatValue = 10;</code>
     */

    @java.lang.Override
    public boolean containsFloatValue(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetFloatValue().getMap().containsKey(key);
    }
    /**
     * Use {@link #getFloatValueMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Float> getFloatValue() {
      return getFloatValueMap();
    }
    /**
     * <code>map&lt;string, float&gt; floatValue = 10;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.Float> getFloatValueMap() {
      return internalGetFloatValue().getMap();
    }
    /**
     * <code>map&lt;string, float&gt; floatValue = 10;</code>
     */
    @java.lang.Override

    public float getFloatValueOrDefault(
        java.lang.String key,
        float defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Float> map =
          internalGetFloatValue().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, float&gt; floatValue = 10;</code>
     */
    @java.lang.Override

    public float getFloatValueOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Float> map =
          internalGetFloatValue().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearFloatValue() {
      internalGetMutableFloatValue().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;string, float&gt; floatValue = 10;</code>
     */

    public Builder removeFloatValue(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableFloatValue().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Float>
    getMutableFloatValue() {
      return internalGetMutableFloatValue().getMutableMap();
    }
    /**
     * <code>map&lt;string, float&gt; floatValue = 10;</code>
     */
    public Builder putFloatValue(
        java.lang.String key,
        float value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      
      internalGetMutableFloatValue().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <code>map&lt;string, float&gt; floatValue = 10;</code>
     */

    public Builder putAllFloatValue(
        java.util.Map<java.lang.String, java.lang.Float> values) {
      internalGetMutableFloatValue().getMutableMap()
          .putAll(values);
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Double> doubleValue_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Double>
    internalGetDoubleValue() {
      if (doubleValue_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            DoubleValueDefaultEntryHolder.defaultEntry);
      }
      return doubleValue_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.Double>
    internalGetMutableDoubleValue() {
      onChanged();;
      if (doubleValue_ == null) {
        doubleValue_ = com.google.protobuf.MapField.newMapField(
            DoubleValueDefaultEntryHolder.defaultEntry);
      }
      if (!doubleValue_.isMutable()) {
        doubleValue_ = doubleValue_.copy();
      }
      return doubleValue_;
    }

    public int getDoubleValueCount() {
      return internalGetDoubleValue().getMap().size();
    }
    /**
     * <code>map&lt;string, double&gt; doubleValue = 11;</code>
     */

    @java.lang.Override
    public boolean containsDoubleValue(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetDoubleValue().getMap().containsKey(key);
    }
    /**
     * Use {@link #getDoubleValueMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Double> getDoubleValue() {
      return getDoubleValueMap();
    }
    /**
     * <code>map&lt;string, double&gt; doubleValue = 11;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.Double> getDoubleValueMap() {
      return internalGetDoubleValue().getMap();
    }
    /**
     * <code>map&lt;string, double&gt; doubleValue = 11;</code>
     */
    @java.lang.Override

    public double getDoubleValueOrDefault(
        java.lang.String key,
        double defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Double> map =
          internalGetDoubleValue().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, double&gt; doubleValue = 11;</code>
     */
    @java.lang.Override

    public double getDoubleValueOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Double> map =
          internalGetDoubleValue().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearDoubleValue() {
      internalGetMutableDoubleValue().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;string, double&gt; doubleValue = 11;</code>
     */

    public Builder removeDoubleValue(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableDoubleValue().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Double>
    getMutableDoubleValue() {
      return internalGetMutableDoubleValue().getMutableMap();
    }
    /**
     * <code>map&lt;string, double&gt; doubleValue = 11;</code>
     */
    public Builder putDoubleValue(
        java.lang.String key,
        double value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      
      internalGetMutableDoubleValue().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <code>map&lt;string, double&gt; doubleValue = 11;</code>
     */

    public Builder putAllDoubleValue(
        java.util.Map<java.lang.String, java.lang.Double> values) {
      internalGetMutableDoubleValue().getMutableMap()
          .putAll(values);
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Integer> enumValue_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
    internalGetEnumValue() {
      if (enumValue_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            EnumValueDefaultEntryHolder.defaultEntry);
      }
      return enumValue_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
    internalGetMutableEnumValue() {
      onChanged();;
      if (enumValue_ == null) {
        enumValue_ = com.google.protobuf.MapField.newMapField(
            EnumValueDefaultEntryHolder.defaultEntry);
      }
      if (!enumValue_.isMutable()) {
        enumValue_ = enumValue_.copy();
      }
      return enumValue_;
    }

    public int getEnumValueCount() {
      return internalGetEnumValue().getMap().size();
    }
    /**
     * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
     */

    @java.lang.Override
    public boolean containsEnumValue(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetEnumValue().getMap().containsKey(key);
    }
    /**
     * Use {@link #getEnumValueMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.examples.protobuf.map.EnumType>
    getEnumValue() {
      return getEnumValueMap();
    }
    /**
     * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.examples.protobuf.map.EnumType>
    getEnumValueMap() {
      return internalGetAdaptedEnumValueMap(
          internalGetEnumValue().getMap());}
    /**
     * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
     */
    @java.lang.Override

    public com.examples.protobuf.map.EnumType getEnumValueOrDefault(
        java.lang.String key,
        com.examples.protobuf.map.EnumType defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetEnumValue().getMap();
      return map.containsKey(key)
             ? enumValueValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
     */
    @java.lang.Override

    public com.examples.protobuf.map.EnumType getEnumValueOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetEnumValue().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return enumValueValueConverter.doForward(map.get(key));
    }
    /**
     * Use {@link #getEnumValueValueMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer>
    getEnumValueValue() {
      return getEnumValueValueMap();
    }
    /**
     * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.Integer>
    getEnumValueValueMap() {
      return internalGetEnumValue().getMap();
    }
    /**
     * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
     */
    @java.lang.Override

    public int getEnumValueValueOrDefault(
        java.lang.String key,
        int defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetEnumValue().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
     */
    @java.lang.Override

    public int getEnumValueValueOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetEnumValue().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearEnumValue() {
      internalGetMutableEnumValue().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
     */

    public Builder removeEnumValue(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableEnumValue().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.examples.protobuf.map.EnumType>
    getMutableEnumValue() {
      return internalGetAdaptedEnumValueMap(
           internalGetMutableEnumValue().getMutableMap());
    }
    /**
     * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
     */
    public Builder putEnumValue(
        java.lang.String key,
        com.examples.protobuf.map.EnumType value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      if (value == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableEnumValue().getMutableMap()
          .put(key, enumValueValueConverter.doBackward(value));
      return this;
    }
    /**
     * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
     */
    public Builder putAllEnumValue(
        java.util.Map<java.lang.String, com.examples.protobuf.map.EnumType> values) {
      internalGetAdaptedEnumValueMap(
          internalGetMutableEnumValue().getMutableMap())
              .putAll(values);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer>
    getMutableEnumValueValue() {
      return internalGetMutableEnumValue().getMutableMap();
    }
    /**
     * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
     */
    public Builder putEnumValueValue(
        java.lang.String key,
        int value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableEnumValue().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <code>map&lt;string, .ref.parse.EnumType&gt; enumValue = 12;</code>
     */
    public Builder putAllEnumValueValue(
        java.util.Map<java.lang.String, java.lang.Integer> values) {
      internalGetMutableEnumValue().getMutableMap()
          .putAll(values);
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.examples.protobuf.map.ReferenceMessageType> referenceValue_;
    private com.google.protobuf.MapField<java.lang.String, com.examples.protobuf.map.ReferenceMessageType>
    internalGetReferenceValue() {
      if (referenceValue_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ReferenceValueDefaultEntryHolder.defaultEntry);
      }
      return referenceValue_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.examples.protobuf.map.ReferenceMessageType>
    internalGetMutableReferenceValue() {
      onChanged();;
      if (referenceValue_ == null) {
        referenceValue_ = com.google.protobuf.MapField.newMapField(
            ReferenceValueDefaultEntryHolder.defaultEntry);
      }
      if (!referenceValue_.isMutable()) {
        referenceValue_ = referenceValue_.copy();
      }
      return referenceValue_;
    }

    public int getReferenceValueCount() {
      return internalGetReferenceValue().getMap().size();
    }
    /**
     * <code>map&lt;string, .ref.parse.ReferenceMessageType&gt; referenceValue = 13;</code>
     */

    @java.lang.Override
    public boolean containsReferenceValue(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetReferenceValue().getMap().containsKey(key);
    }
    /**
     * Use {@link #getReferenceValueMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.examples.protobuf.map.ReferenceMessageType> getReferenceValue() {
      return getReferenceValueMap();
    }
    /**
     * <code>map&lt;string, .ref.parse.ReferenceMessageType&gt; referenceValue = 13;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.examples.protobuf.map.ReferenceMessageType> getReferenceValueMap() {
      return internalGetReferenceValue().getMap();
    }
    /**
     * <code>map&lt;string, .ref.parse.ReferenceMessageType&gt; referenceValue = 13;</code>
     */
    @java.lang.Override

    public com.examples.protobuf.map.ReferenceMessageType getReferenceValueOrDefault(
        java.lang.String key,
        com.examples.protobuf.map.ReferenceMessageType defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, com.examples.protobuf.map.ReferenceMessageType> map =
          internalGetReferenceValue().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, .ref.parse.ReferenceMessageType&gt; referenceValue = 13;</code>
     */
    @java.lang.Override

    public com.examples.protobuf.map.ReferenceMessageType getReferenceValueOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, com.examples.protobuf.map.ReferenceMessageType> map =
          internalGetReferenceValue().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearReferenceValue() {
      internalGetMutableReferenceValue().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;string, .ref.parse.ReferenceMessageType&gt; referenceValue = 13;</code>
     */

    public Builder removeReferenceValue(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableReferenceValue().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.examples.protobuf.map.ReferenceMessageType>
    getMutableReferenceValue() {
      return internalGetMutableReferenceValue().getMutableMap();
    }
    /**
     * <code>map&lt;string, .ref.parse.ReferenceMessageType&gt; referenceValue = 13;</code>
     */
    public Builder putReferenceValue(
        java.lang.String key,
        com.examples.protobuf.map.ReferenceMessageType value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      if (value == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableReferenceValue().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <code>map&lt;string, .ref.parse.ReferenceMessageType&gt; referenceValue = 13;</code>
     */

    public Builder putAllReferenceValue(
        java.util.Map<java.lang.String, com.examples.protobuf.map.ReferenceMessageType> values) {
      internalGetMutableReferenceValue().getMutableMap()
          .putAll(values);
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:ref.parse.MapMessageType)
  }

  // @@protoc_insertion_point(class_scope:ref.parse.MapMessageType)
  private static final com.examples.protobuf.map.MapMessageType DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.examples.protobuf.map.MapMessageType();
  }

  public static com.examples.protobuf.map.MapMessageType getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<MapMessageType>
      PARSER = new com.google.protobuf.AbstractParser<MapMessageType>() {
    @java.lang.Override
    public MapMessageType parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new MapMessageType(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<MapMessageType> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<MapMessageType> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.examples.protobuf.map.MapMessageType getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

